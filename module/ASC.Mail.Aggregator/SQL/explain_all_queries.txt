------------------------------------------------------------------------------------------------
--	 						MailBoxManager.Alerts.cs 										  --
------------------------------------------------------------------------------------------------
1.  public List<MailAlert> GetMailAlerts(int tenant, string id_user)

	db.ExecuteList(
		new SqlQuery(MAIL_ALERTS)
			.Select(MailAlerts.id, MailAlerts.data)
			.Where(GetUserWhere(id_user, tenant)));

QUERY:
	SELECT t.id, t.`data` 
	FROM mail_alerts t 
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.tenant = 0
EXPLAIN: 
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>USER</possible_keys>
			<key>USER</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
2.  public void DeleteAlert(int tenant, string id_user, long id)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_ALERTS)
			.Where(GetUserWhere(id_user, tenant))
			.Where(MailAlerts.id, id));

QUERY:
	SELECT * FROM mail_alerts t 
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.tenant = 0 AND t.id = 61
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>const</type>
			<possible_keys>PRIMARY,USER</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
3.  private int CreateAlert(int tenant, string id_user, object data)

	db.ExecuteNonQuery(
		new SqlInsert(MAIL_ALERTS)
			.InColumnValue(MailAlerts.id_tenant, tenant)
			.InColumnValue(MailAlerts.id_user, id_user)
			.InColumnValue(MailAlerts.data, json_data));

QUERY:		-
EXPLAIN:	Not suppoted
COMMENT:
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Attachments.cs 									  --
------------------------------------------------------------------------------------------------
4.  public int AttachmentEmbeddedExist(int message_id, string content_id)

	var attach_id = db.ExecuteScalar<int>(
		new SqlQuery(MAIL_ATTACHMENT)
			.Select(AttachmentFields.id)
			.Where(AttachmentFields.id_mail, message_id)
			.Where(AttachmentFields.need_remove, false)
			.Where(AttachmentFields.content_id, content_id));

QUERY:
	SELECT t.id 
	FROM mail_attachment t 
	WHERE t.id_mail = 0 AND t.need_remove = false AND t.content_id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>8</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
5.  public void DeleteMessageAttachments(int id_tenant, string id_user, int messageId, IEnumerable<int> attachment_ids)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_ATTACHMENT)
			.Set(AttachmentFields.need_remove, true)
			.Where(AttachmentFields.id_mail, messageId)
			.Where(Exp.In(AttachmentFields.id, attachment_ids.ToArray())));

QUERY:
	SELECT * 
	FROM mail_attachment t 
	WHERE t.id_mail = 0 AND t.id in (1,2,3,5,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>PRIMARY,quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
6.  public MailItemAttachment GetMessageAttachment(int id_tenant, string id_user, int message_id, int attach_id)

	var stream = db.ExecuteScalar<string>(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.stream)
			.Where(MailFields.id, message_id));

QUERY:
	SELECT t.stream 
	FROM mail_mail t 
	WHERE t.id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
7.  public MailItemAttachment GetMessageAttachment(int id_tenant, string id_user, int message_id, int attach_id)

	var attachment = db.ExecuteList(
		new SqlQuery(MAIL_ATTACHMENT)
			.Select(AttachmentFields.name, AttachmentFields.type, AttachmentFields.size, AttachmentFields.file_number, AttachmentFields.id)
			.Where(AttachmentFields.id_mail, message_id)
			.Where(AttachmentFields.need_remove, false)
			.Where(AttachmentFields.id, attach_id));

QUERY:
	SELECT t.name, t.`type`, t.size, t.file_number, t.id 
	FROM mail_attachment t 
	WHERE t.id_mail = 13 AND t.need_remove = false AND t.id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>const</type>
			<possible_keys>PRIMARY,quota_index,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
9. public long GetAttachmentsTotalSize(int id_mail)

	long total_size = db.ExecuteList(
		new SqlQuery(MAIL_ATTACHMENT)
			.SelectSum(AttachmentFields.size)
			.Where(AttachmentFields.id_mail, id_mail)
			.Where(AttachmentFields.need_remove, false)
			.Where(EqExp.Eq(AttachmentFields.content_id, EqExp.Empty)))
			.ConvertAll(r => Convert.ToInt64(r[0]))
			.FirstOrDefault();

QUERY:
	SELECT SUM(t.size) 
	FROM mail_attachment t 
	WHERE t.id_mail = 10 AND t.need_remove = false AND t.content_id = ''
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>8</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
10. public int GetMaxAttachmentNumber(int id_mail)

	var number = db.ExecuteList(
		new SqlQuery(MAIL_ATTACHMENT)
			.SelectMax(AttachmentFields.file_number)
			.Where(AttachmentFields.id_mail, id_mail))
			.ConvertAll(r => Convert.ToInt32(r[0]))
			.FirstOrDefault();

QUERY:
	SELECT MAX(t.file_number) 
	FROM mail_attachment t 
	WHERE t.id_mail = 10
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
11. public int SaveAttachment(DbManager db, int id_tenant, int id_mail, MailItemAttachment attachment, bool need_recount)

	id = db.ExecuteScalar<int>(
		new SqlInsert(MAIL_ATTACHMENT)
			.InColumnValue(AttachmentFields.id, 0)
			.InColumnValue(AttachmentFields.id_mail, id_mail)
			.InColumnValue(AttachmentFields.name, attachment.FileName)
			.InColumnValue(AttachmentFields.type, attachment.ContentType)
			.InColumnValue(AttachmentFields.size, attachment.Size)
			.InColumnValue(AttachmentFields.file_number, attachment.FileNumber)
			.InColumnValue(AttachmentFields.need_remove, false)
			.InColumnValue(AttachmentFields.content_id, attachment.ContentId)
			.InColumnValue(AttachmentFields.id_tenant, id_tenant)
			.Identity(0, 0, true));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
12. private int GetCountAttachments(DbManager db, int id_mail)

	int count_attachments = db.ExecuteScalar<int>(
		new SqlQuery(MAIL_ATTACHMENT)
			.SelectCount(AttachmentFields.id)
			.Where(AttachmentFields.id_mail, id_mail)
			.Where(AttachmentFields.need_remove, false)
			.Where(EqExp.Eq(AttachmentFields.content_id, EqExp.Empty)));

QUERY:
	SELECT COUNT(t.id) 
	FROM mail_attachment t 
	WHERE t.id_mail = 10 AND t.need_remove = false AND t.content_id = ''
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>8</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
13. private void ReCountAttachments(DbManager db, int id_mail)

	db.ExecuteNonQuery(
			new SqlUpdate(MAIL_MAIL)
				.Set(MailFields.attach_count, count_attachments)
				.Where(MailFields.id, id_mail));

QUERY:
	SELECT * 
	FROM mail_mail t 
	WHERE t.id = 10
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Contacts.cs										  --
------------------------------------------------------------------------------------------------ 
1. public int MailContactExists(string userId, string name, string address)

	db.ExecuteScalar<int>(
			new SqlQuery(MAIL_CONTACTS)
				.Select(MailContactsFields.id)
				.Where(MailContactsFields.id_user, userId)
				.Where(MailContactsFields.name, name)
				.Where(MailContactsFields.address, address));

QUERY:
	SELECT t.id 
	FROM mail_contacts t 
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.name = '123' AND t.address = '123'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>id_user_name_address</possible_keys>
			<key>id_user_name_address</key>
			<key_len>1534</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
2. public int MailContactSave(string userId, int tenantId, string name, string address)

	SqlInsert insert = new SqlInsert(MAIL_CONTACTS, true)
			.InColumnValue(MailContactsFields.id, 0)
			.InColumnValue(MailContactsFields.id_user, userId)
			.InColumnValue(MailContactsFields.id_tenant, tenantId)
			.InColumnValue(MailContactsFields.name, name)
			.InColumnValue(MailContactsFields.address, address)
			.InColumnValue(MailContactsFields.last_modified, DateTime.Now)
			.Identity(0, 0, true);
	id = db.ExecuteNonQuery(insert);

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
3. public List<string> SearchMailContacts(int tenant_id, string user_id, string searchText)

	SqlQuery q = new SqlQuery(MAIL_CONTACTS)
			.Select(MailContactsFields.name, MailContactsFields.address)
			.Where(Exp.In(MailContactsFields.id, ids.Take(FULLTEXTSEARCH_IDS_COUNT).ToList()))
			.Where(MailContactsFields.id_user, user_id);
	var result = db.ExecuteList(q);

QUERY:
	SELECT t.name, t.address 
	FROM mail_contacts t 
	WHERE t.id in (1,2,3,4,5) AND t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>PRIMARY,id_user_name_address</possible_keys>
			<key>id_user_name_address</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
4. public List<string> SearchMailContacts(int tenant_id, string user_id, string searchText)

	SqlQuery q = new SqlQuery(MAIL_CONTACTS)
			.Select(MailContactsFields.name, MailContactsFields.address)
			.Where(MailContactsFields.id_user, user_id)
			.Where(Exp.Like("concat(" + MailContactsFields.name + ", ' ', " + MailContactsFields.address + ")", searchText));
	var result = db.ExecuteList(q);

QUERY:
	SELECT t.name, t.address 
	FROM mail_contacts t 
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND concat(t.name, t.address) like 'test test'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>id_user_name_address</possible_keys>
			<key>id_user_name_address</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
5. public List<string> SearchCRMContacts(int tenant_id, string user_id, string searchText)

	SqlQuery q = new SqlQuery("crm_contact c")
			.Select("c.id", "c.is_company", "trim(concat(c.first_name, ' ', c.last_name, ' ', c.company_name))", "i.data")
			.InnerJoin("crm_contact_info i", Exp.EqColumns("c.tenant_id", "i.tenant_id") & Exp.EqColumns("c.id", "i.contact_id"))
			.Where(Exp.In("i.id", ids.Take(FULLTEXTSEARCH_IDS_COUNT).ToList()))
			.Where("i.type", (int)ContactInfoType.Email);
	var result = db.ExecuteList(q);

QUERY:
	SELECT c.id, c.is_company, TRIM(CONCAT(c.first_name, ' ', c.last_name, ' ', c.company_name)), i.data
	FROM crm_contact c
	INNER JOIN
	crm_contact_info i ON c.tenant_id = i.tenant_id AND c.id = i.contact_id
	WHERE i.id IN (1,2,3,4,5) AND i.`type` = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>i</table>
			<type>range</type>
			<possible_keys>PRIMARY,IX_Contact</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>c</table>
			<type>eq_ref</type>
			<possible_keys>PRIMARY,company_id,display_name</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>test.i.contact_id</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
6. public List<string> SearchCRMContacts(int tenant_id, string user_id, string searchText)

	SqlQuery q = new SqlQuery("crm_contact c")
			.Select("c.id", "c.is_company", "trim(concat(c.first_name, ' ', c.last_name, ' ', c.company_name))", "i.data")
			.InnerJoin("crm_contact_info i", Exp.EqColumns("c.tenant_id", "i.tenant_id") & Exp.EqColumns("c.id", "i.contact_id"))
			.Where("c.tenant_id", tenant_id)
			.Where("i.type", (int)ContactInfoType.Email)
			.Where("(concat(c.display_name, ' ', i.data) like '%" + searchText + "%')");
	var result = db.ExecuteList(q);

QUERY:
	SELECT c.id, c.is_company, TRIM(CONCAT(c.first_name, ' ', c.last_name, ' ', c.company_name)), i.data
	FROM crm_contact c
	INNER JOIN
	crm_contact_info i ON c.tenant_id = i.tenant_id AND c.id = i.contact_id
	WHERE c.tenant_id = 0 AND i.`type` = 1 AND (CONCAT(c.display_name, ' ', i.data) LIKE '%test%')
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>i</table>
			<type>ref</type>
			<possible_keys>IX_Contact</possible_keys>
			<key>IX_Contact</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>9</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>c</table>
			<type>eq_ref</type>
			<possible_keys>PRIMARY,company_id,display_name</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>test.i.contact_id</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
7. public List<string> SearchTeamLabContacts(int tenant_id, string searchText)

	var q = new SqlQuery("core_user c")
			.Select("concat('\\\"', c.firstname, ' ', c.lastname, '\\\" <', c.email, '>')")
			.Where(Exp.In("id", ids.Take(FULLTEXTSEARCH_IDS_COUNT).ToList()));

	var result = db.ExecuteList(q)
		.ConvertAll(r => r[0].ToString());

QUERY:
	SELECT CONCAT('\\\"', c.firstname, ' ', c.lastname, '\\\" <', c.email, '>')
	FROM core_user c
	WHERE c.id IN ('123', '456', '789')
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>c</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>116</key_len>
			<ref isnull="true" />
			<rows>3</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
8. public List<string> SearchTeamLabContacts(int tenant_id, string searchText)

	var q = new SqlQuery("core_user c")
		.Select("concat('\\\"', c.firstname, ' ', c.lastname, '\\\" <', c.email, '>')")
		.Where("c.tenant", tenant_id)
		.Where(Exp.Like("concat(c.firstname, ' ', c.lastname, ' ', c.email)", searchText));

	var result = db.ExecuteList(q)
		.ConvertAll(r => r[0].ToString());

QUERY:
	SELECT CONCAT('\\\"', c.firstname, ' ', c.lastname, '\\\" <', c.email, '>')
	FROM core_user c
	WHERE c.tenant = 0 AND CONCAT(c.firstname, ' ', c.lastname, ' ', c.email) LIKE 'test'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>c</table>
			<type>ref</type>
			<possible_keys>username</possible_keys>
			<key>username</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>187</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
9. public List<int> GetCrmContactsId(int tenant_id, string user_id, string email)

	var q = new SqlQuery("crm_contact c")
		.Select("c.id", "c.is_company")
		.InnerJoin("crm_contact_info i", Exp.EqColumns("c.tenant_id", "i.tenant_id") & Exp.EqColumns("c.id", "i.contact_id"))
		.Where("c.tenant_id", tenant_id)
		.Where("i.type", (int)ContactInfoType.Email)
		.Where(Exp.Eq("i.data", mail.FromEmail));

	var result = db.ExecuteList(q);

QUERY:
	SELECT c.id, c.is_company
	FROM crm_contact c INNER JOIN
	crm_contact_info i ON c.tenant_id = i.tenant_id AND c.id = i.contact_id
	WHERE c.tenant_id = 0 AND i.type = 1 AND i.data = 'test'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>i</table>
			<type>ref</type>
			<possible_keys>IX_Contact</possible_keys>
			<key>IX_Contact</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>9</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>c</table>
			<type>eq_ref</type>
			<possible_keys>PRIMARY,company_id,display_name</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>test.i.contact_id</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Conversations.cs 								  --
------------------------------------------------------------------------------------------------
1. public List<MailMessageItem> GetConversations(int id_tenant, string id_user, MailFilter filter, DateTime? utc_chain_from_date, int from_message, bool? prev_flag, out bool has_more)

	var extended_info = db.ExecuteList(
		new SqlQuery(MAIL_CHAIN)
			.Select(
				ChainFields.id,
				ChainFields.id_mailbox,
				ChainFields.length,
				ChainFields.unread,
				ChainFields.importance,
				ChainFields.has_attachments,
				ChainFields.tags)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(Exp.In(ChainFields.id, chain_ids.ToArray()))
			.Where(ChainFields.folder, MailFolder.Sent.Id == filter.PrimaryFolder ? MailFolder.Inbox.Id : filter.PrimaryFolder));

QUERY:
	SELECT t.id, t.id_mailbox, t.length, t.unread, t.importance, t.has_attachments, t.tags
	FROM mail_chain t
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.tenant = 0 AND t.id IN ('123', '456', '789') AND t.folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>1538</key_len>
			<ref isnull="true" />
			<rows>3</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
2. public void RestoreConversations(int id_tenant, string id_user, List<int> ids)

	var query = string.Format("Update {0} SET {1} = {2} WHERE {3} IN ({4});",
		MAIL_MAIL, MailFields.folder, MailFields.folder_restore,
		MailFields.id, string.Join(",", ids_array));
	db.ExecuteNonQuery(query);

QUERY:
	SELECT *
	FROM mail_mail t
	WHERE t.id IN (1,2,3,4,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
3. public void SetConversationsReadFlags(int tenant, string user, List<int> ids, bool is_read)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(new InExp(MailFields.id, chained_messages_ids.ToArray()))
			.Where(GetUserWhere(user, tenant))
			.Set(MailFields.unread, !is_read));

QUERY:
	SELECT *
	FROM mail_mail t
	WHERE t.id IN (1,2,3,4,5) AND t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
4. public void UpdateConversationsImportance(int tenant, string user, bool important, List<int> ids)

	var chains_info_query = new SqlQuery(MAIL_MAIL)
		.Select(MailFields.chain_id)
		.Select(MailFields.folder)
		.Select(MailFields.id_mailbox)
		.Where(GetUserWhere(user, tenant))
		.Where(new InExp(MailFields.id, ids.Select(x => (object)x).ToArray()));

	var chains_info = db.ExecuteList(chains_info_query);

QUERY:
	SELECT t.chain_id, t.folder, t.id_mailbox
	FROM mail_mail t
	WHERE t.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND t.tenant = 0 AND t.id IN (1,2,3,4,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
5. private List<MailMessageItem> GetFilteredChains(DbManager db, int id_tenant, string id_user, MailFilter filter, DateTime? utc_chain_from_date, int from_message, bool? prev_flag, out bool has_more)

	var query_messages = new SqlQuery(MAIL_MAIL)
		.Select(
			MailFields.id,
			MailFields.from,
			MailFields.to,
			MailFields.reply,
			MailFields.subject,
			MailFields.importance,
			MailFields.date_sent,
			MailFields.size,
			MailFields.attach_count,
			MailFields.unread,
			MailFields.is_answered,
			MailFields.is_forwarded,
			MailFields.is_from_crm,
			MailFields.is_from_tl,
			MailFields.folder_restore,
			MailFields.folder,
			MailFields.chain_id,
			MailFields.id_mailbox,
			MailFields.chain_date)
		.Where(GetUserWhere(id_user, id_tenant))
		.Where(MailFields.is_removed, false)
		.ApplyFilter(filter)
		.OrderBy(MailFields.chain_date, sort_order);

	if (null != utc_chain_from_date)
	{
		query_messages = query_messages.Where(sort_order ? 
			Exp.Ge(MailFields.chain_date, utc_chain_from_date) : 
			Exp.Le(MailFields.chain_date, utc_chain_from_date));
		skip_flag = true;
	}
	query_messages.SetFirstResult(chunck_index * chunk_size * filter.PageSize).SetMaxResults(chunk_size * filter.PageSize);
	
	var list = db.ExecuteList(query_messages)

QUERY:
	1. -- Empty Filter
	SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, 
	is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1
	ORDER BY chain_date DESC
	LIMIT 300; 
	2. -- Second page with empty filter
	SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, 
	is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1 AND chain_date <= '28.02.2013 11:49:59'
	ORDER BY chain_date DESC
	LIMIT 300;
	3. -- First page with all filters params
	SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, 
	is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1 AND id IN (
	SELECT id_mail
	FROM (
	SELECT id_mail
	FROM mail_tag_mail
	WHERE id_tag IN (315, 255)) AS a
	GROUP BY id_mail
	HAVING COUNT(a.id_mail)=1) AND 
	unread = true AND 
	attachments_count > 0 AND 
	date_sent BETWEEN '12.09.2012 20:00:00' AND '13.03.2013 20:00:00' AND 
	importance = true AND 
	from_text LIKE 'profi.troll.4test@gmail.com' AND 
	id_mailbox = 315 AND
	(from_text LIKE 'docs' OR to_text LIKE 'docs' OR cc LIKE 'docs' OR bcc LIKE 'docs' OR subject LIKE 'docs')
	ORDER BY chain_date DESC
	LIMIT 300
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where</Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where</Extra>
		</row>
	</table>
	3.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>&lt;derived3&gt;</table>
			<type>ALL</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>27</rows>
			<Extra>Using temporary; Using filesort</Extra>
		</row>
		<row>
			<id>3</id>
			<select_type>DERIVED</select_type>
			<table>mail_tag_mail</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>213</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Возможно можно упростить?
------------------------------------------------------------------------------------------------
6. public void UpdateConversationsImportance(int tenant, string user, bool important, List<int> ids)

	var update_mail_query = new SqlUpdate(MAIL_MAIL)
                .Set(MailFields.importance, important)
                .Where(GetUserWhere(user, tenant));

	foreach (var chain in chains_info)
	{
		if (first_loop)
				first_loop = false;
			else
				where_chain_case += " or ";

			where_chain_case += "(" + MailFields.chain_id + " = '" + chain.id;
			where_chain_case += "' and " + MailFields.id_mailbox + " = " + chain.mailbox;
			if (chain.folder == MailFolder.Inbox.Id || chain.folder == MailFolder.Sent.Id)
			{
				where_chain_case += " and (" + MailFields.folder + " = " + MailFolder.Inbox.Id;
				where_chain_case += " or " + MailFields.folder + " = " + MailFolder.Sent.Id + "))";
			}
			else
				where_chain_case += " and " + MailFields.folder + " = " + chain.folder + ")";
		}
	}

	where_chain_case += ")";

	db.ExecuteNonQuery(update_mail_query.Where(new SqlExp(where_chain_case)));

QUERY:
	1. 
	SELECT importance
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND ((chain_id = '<1313131313131313131>' AND id_mailbox = 1 AND (folder = 1 OR folder = 2)))
	2.
	SELECT importance
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND ((chain_id = '<1313131313131313131>' AND id_mailbox = 1 AND (folder = 1 OR folder = 2)) OR
	(chain_id = '<1212121212121212121>' AND id_mailbox = 1 AND (folder = 1 OR folder = 2)))
EXPLAIN:
	1,2:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
7. private static List<object[]> GetChainedMessagesInfo(Common.Data.DbManager db, int id_tenant, string id_user, List<int> ids, string[] fields)

	var selected_messages_query = string.Format(
		"SELECT {0}, {1}, {2} FROM {3} WHERE {4} IN ({5})",
		MailFields.folder,
		MailFields.chain_id,
		MailFields.id_mailbox,
		MAIL_MAIL,
		MailFields.id,
		string.Join(",", ids.ConvertAll(x => x.ToString(CultureInfo.InvariantCulture)).ToArray()));

	var extended_fields = new List<string>
		{
			MailFields.folder,
			MailFields.chain_id,
			MailFields.id_mailbox
		};
	extended_fields.AddRange(fields);

	var not_removed_user_messages_query = string.Format(
		"SELECT {0} FROM {1} WHERE {2}={3} AND {4}=\"{5}\" AND {6}=0",
		string.Join(", ", extended_fields.Distinct().ToArray()),
		MAIL_MAIL,
		MailFields.id_tenant,
		id_tenant,
		MailFields.id_user,
		id_user,
		MailFields.is_removed);

	var query = string.Format(
		"SELECT {0} FROM ({1}) AS mm INNER JOIN ({2}) AS sm" +
		" ON mm.{3}=sm.{3} AND (mm.{4}=sm.{4} OR (mm.{4} IN (1,2) AND sm.{4} IN (1,2))) AND mm.{5}=sm.{5}",
		"mm." + string.Join(", mm.", fields),
		not_removed_user_messages_query,
		selected_messages_query,
		MailFields.chain_id,
		MailFields.folder,
		MailFields.id_mailbox);

	return db.ExecuteList(query);

QUERY:
	SELECT mm.id, mm.unread, mm.folder, mm.chain_id, mm.id_mailbox
	FROM (
	SELECT folder, chain_id, id_mailbox, id, unread
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = 0) AS mm
	INNER JOIN (
	SELECT folder, chain_id, id_mailbox
	FROM mail_mail
	WHERE id IN (240208)) AS sm ON mm.chain_id = sm.chain_id AND 
	(mm.folder = sm.folder OR (mm.folder IN (1,2) AND sm.folder IN (1,2))) AND mm.id_mailbox = sm.id_mailbox
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>&lt;derived3&gt;</table>
			<type>system</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>1</rows>
			<Extra></Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>&lt;derived2&gt;</table>
			<type>ALL</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>61</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>3</id>
			<select_type>DERIVED</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref></ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DERIVED</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>772</key_len>
			<ref></ref>
			<rows>60</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Возможно можно упростить?
------------------------------------------------------------------------------------------------
8. private void UpdateChain(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

	var chain_params_query = new SqlQuery(MAIL_MAIL)
		.SelectCount()
		.SelectMax(MailFields.date_sent)
		.SelectMax(MailFields.unread)
		.SelectMax(MailFields.attach_count)
		.SelectMax(MailFields.importance)
		.Where(GetUserWhere(user_id, tenant))
		.Where(MailFields.is_removed, 0)
		.Where(MailFields.chain_id, chain_id)
		.Where(MailFields.id_mailbox, id_mailbox)
		.Where(MailFields.folder, folder);

	if (inbox_sent_flag)
		chain_params_query.Union(new SqlQuery(MAIL_MAIL)
				.SelectCount()
				.SelectMax(MailFields.date_sent)
				.SelectMax(MailFields.unread)
				.SelectMax(MailFields.attach_count)
				.SelectMax(MailFields.importance)
				.Where(GetUserWhere(user_id, tenant))
				.Where(MailFields.is_removed, 0)
				.Where(MailFields.chain_id, chain_id)
				.Where(MailFields.id_mailbox, id_mailbox)
				.Where(MailFields.folder, MailFolder.Inbox.Id == folder ? MailFolder.Sent.Id : MailFolder.Inbox.Id)));
	db.ExecuteList( chain_params_query );

QUERY:
	SELECT COUNT(*), MAX(date_sent), MAX(unread), MAX(attachments_count), MAX(importance)
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = false AND chain_id = '<111>' AND id_mailbox = 1 AND folder = 1 UNION
	SELECT COUNT(*), MAX(date_sent), MAX(unread), MAX(attachments_count), MAX(importance)
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = false AND chain_id = '<111>' AND id_mailbox = 1 AND folder = 2
EXPLAIN:
<table name="UnknownTable">
	<row>
		<id>1</id>
		<select_type>PRIMARY</select_type>
		<table>mail_mail</table>
		<type>ref</type>
		<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
		<key>chain_index_folders</key>
		<key_len>776</key_len>
		<ref>const,const,const</ref>
		<rows>1</rows>
		<Extra>Using where</Extra>
	</row>
	<row>
		<id>2</id>
		<select_type>UNION</select_type>
		<table>mail_mail</table>
		<type>ref</type>
		<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
		<key>chain_index_folders</key>
		<key_len>776</key_len>
		<ref>const,const,const</ref>
		<rows>1</rows>
		<Extra>Using where</Extra>
	</row>
	<row>
		<id isnull="true" />
		<select_type>UNION RESULT</select_type>
		<table>&lt;union1,2&gt;</table>
		<type>ALL</type>
		<possible_keys isnull="true" />
		<key isnull="true" />
		<key_len isnull="true" />
		<ref isnull="true" />
		<rows isnull="true" />
		<Extra></Extra>
	</row>
</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
9. private void UpdateChain(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_CHAIN)
			.Where(GetUserWhere(user_id, tenant))
			.Where(ChainFields.id, chain_id)
			.Where(ChainFields.id_mailbox, id_mailbox)
			.Where(ChainFields.folder, inbox_sent_flag ? MailFolder.Inbox.Id : folder));

QUERY:
	SELECT * FROM mail_chain
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id = '<7ef43e81-1f67-4ed8-9de3-38b878815b46@mail.dll>' AND id_mailbox = 236 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_chain</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>1546</key_len>
			<ref>const,const,const,const,const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
10. private void UpdateChain(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(GetUserWhere(user_id, tenant))
			.Where(MailFields.is_removed, 0)
			.Where(MailFields.chain_id, chain_id)
			.Where(MailFields.id_mailbox, id_mailbox)
			.Where(MailFields.folder, folder)
			.Set(MailFields.chain_date, date));
QUERY:
	SELECT chain_date FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = false AND chain_id = '<111>' AND id_mailbox = 1 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
			<key>chain_index_folders</key>
			<key_len>776</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
11. private void UpdateChain(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

	db.ExecuteNonQuery(
		new SqlInsert(MAIL_CHAIN, true)
			.InColumnValue(ChainFields.id, chain_id)
			.InColumnValue(ChainFields.id_mailbox, id_mailbox)
			.InColumnValue(ChainFields.id_tenant, tenant)
			.InColumnValue(ChainFields.id_user, user_id)
			.InColumnValue(ChainFields.folder, inbox_sent_flag ? MailFolder.Inbox.Id : folder)
			.InColumnValue(ChainFields.length, length)
			.InColumnValue(ChainFields.unread, unread)
			.InColumnValue(ChainFields.has_attachments, attach_count > 0)
			.InColumnValue(ChainFields.importance, importance)
			.InColumnValue(ChainFields.tags, tags));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
12. private void UpdateChainTags(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_CHAIN)
			.Set(ChainFields.tags, tags)
			.Where(GetUserWhere(user, tenant))
			.Where(ChainFields.id, chain_id)
			.Where(ChainFields.id_mailbox, id_mailbox)
			.Where(ChainFields.folder, chain_folder));

QUERY:
	SELECT tags FROM mail_chain
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id = 1 AND id_mailbox = 1 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_chain</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
13. private void UpdateMessageChainFlag(Common.Data.DbManager db, int tenant, string user, int message_id, string field_from, string field_to)

	var field_query = new SqlQuery(MAIL_MAIL)
		.SelectMax(field_from)
		.Where(MailFields.is_removed, 0)
		.Where(MailFields.chain_id, chain.id)
		.Where(MailFields.id_mailbox, chain.mailbox)
		.Where(Exp.In(MailFields.folder, folders))
		.Where(GetUserWhere(user, tenant));
	var field_val = db.ExecuteScalar<bool>(field_query);

QUERY:
	SELECT MAX(unread)
	FROM mail_mail
	WHERE is_removed = false AND chain_id = '<111>' AND id_mailbox = 1 AND folder IN (1,2) AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
			<key>chain_index_folders</key>
			<key_len>776</key_len>
			<ref isnull="true" />
			<rows>2</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
14. private void UpdateMessageChainFlag(Common.Data.DbManager db, int tenant, string user, int message_id, string field_from, string field_to)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_CHAIN)
			.Set(field_to, field_val)
			.Where(GetUserWhere(user, tenant))
			.Where(ChainFields.id, chain.id)
			.Where(ChainFields.id_mailbox, chain.mailbox)
			.Where(ChainFields.folder, chain_folder));

QUERY:
	SELECT unread
	FROM mail_chain
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id = 1 AND id_mailbox = 1 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_chain</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
15. private ChainInfo GetMessageChainInfo(Common.Data.DbManager db, int tenant, string user, int message_id)

	var info = db.ExecuteList(new SqlQuery(MAIL_MAIL)
		.Select(MailFields.chain_id, MailFields.folder, MailFields.id_mailbox)
		.Where(MailFields.id, message_id)
		.Where(GetUserWhere(user, tenant)));

QUERY:
	SELECT chain_id, folder, id_mailbox
	FROM mail_mail
	WHERE id = 278 AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
16. private string GetChainTags(Common.Data.DbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

	string select_chain_messages_ids = String.Format("select id from {0} where {1} = \"{2}\" and {3}=0 and {4}={5} and {6}=\"{7}\" and {8} in ({9}) and {10} = {11}",
		MAIL_MAIL,
		MailFields.chain_id,
		chain_id,
		MailFields.is_removed,
		MailFields.id_tenant,
		tenant,
		MailFields.id_user,
		user_id,
		MailFields.folder,
		string.Join(",", search_folders.ConvertAll(x => x.ToString(CultureInfo.InvariantCulture)).ToArray()),
		MailFields.id_mailbox,
		id_mailbox);

	var select_tag_ids = String.Format("SELECT DISTINCT tm.{0} from {1} as tm inner join (",
		TagMailFields.id_tag,
		MAIL_TAG_MAIL);
	select_tag_ids += select_chain_messages_ids;
	select_tag_ids += String.Format(") as ch ON ch.{0}=tm.{1} order by tm.{2}",
		MailFields.id,
		TagMailFields.id_mail,
		TagMailFields.time_created);

	var tags = db.ExecuteList(select_tag_ids).ConvertAll(x => x[0].ToString());

QUERY:
	SELECT DISTINCT tm.id_tag
	FROM mail_tag_mail AS tm
	INNER JOIN (
	SELECT id
	FROM mail_mail
	WHERE chain_id = '<9fb4307c2c8ddb5d@a11f8354d57a8add>' AND 
	is_removed=0 AND 
	tenant=0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND 
	folder IN (1,2) AND id_mailbox = 229) AS ch ON ch.id=tm.id_mail
	ORDER BY tm.time_created
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>&lt;derived2&gt;</table>
			<type>ALL</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>2</rows>
			<Extra>Using temporary; Using filesort</Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>tm</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>ch.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DERIVED</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>chain_index_folders,id_mailbox,time_modified,main</possible_keys>
			<key>chain_index_folders</key>
			<key_len>776</key_len>
			<ref isnull="true" />
			<rows>3</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Возможно можно упростить?
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.cs 												  --
------------------------------------------------------------------------------------------------
17. public DateTime GetMailboxFolderModifyDate(int mailbox_id, int folder_id)

	var date_string = db.ExecuteScalar<string>(
		new SqlQuery(MAIL_MAIL)
			.SelectMax(MailFields.time_modified)
			.Where(MailFields.id_mailbox, mailbox_id)
			.Where(Exp.Eq(MailFields.folder, folder_id)));

QUERY:
	SELECT MAX(time_modified)
	FROM mail_mail
	WHERE id_mailbox = 1 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Folders.cs 										  --
------------------------------------------------------------------------------------------------
1. public List<MailFolderInfo> GetFoldersList(int tenant, string user)

	var query = new SqlQuery(MAIL_FOLDER)
		.Select(FolderFields.folder, FolderFields.time_modified, FolderFields.unread)
		.Where(GetUserWhere(user, tenant));

	var query_res = db.ExecuteList(query);

QUERY:
	SELECT folder, time_modified, unread
	FROM mail_folder
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' and tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_folder</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
2. public DateTime GetMessagesModifyDate(int tenant, string user)

	var query = new SqlQuery(MAIL_FOLDER)
		.SelectMax(FolderFields.time_modified)
		.Where(GetUserWhere(user, tenant));

	var date_string = db.ExecuteScalar<string>(query);

QUERY:
	SELECT MAX(time_modified)
	FROM mail_folder
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' and tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_folder</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
3. public DateTime GetFolderModifyDate(int tenant, string user, int folder)

	var query = new SqlQuery(MAIL_FOLDER)
		.Select(FolderFields.time_modified)
		.Where(GetUserWhere(user, tenant))
		.Where(FolderFields.folder, folder);

	var date_string = db.ExecuteScalar<string>(query);

QUERY:
	SELECT time_modified
	FROM mail_folder
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' and tenant = 0 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_folder</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>773</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
4. private void ChangeFolderUnread(IDbManager db, int tenant, string user, int folder, int diff)

	var res = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_FOLDER)
			.Where(GetUserWhere(user, tenant))
			.Where(FolderFields.folder, folder)
			.Set(FolderFields.unread + "=" + FolderFields.unread + "+(" + diff + ")"));

QUERY:
	SELECT *
	FROM mail_folder
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' and tenant = 0 AND folder = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_folder</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>773</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
5. private List<MailFolderInfo> RecalculateFolders(IDbManager db, int tenant, string user)

	var unread_counts = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.folder, "count(1)")
			.Where(GetUserWhere(user, tenant))
			.Where(MailFields.unread, true)
			.Where(MailFields.is_removed, false)
			.GroupBy(MailFields.folder))
						  .ConvertAll(
							  x => new KeyValuePair<int, int>(Convert.ToInt32(x[0]), Convert.ToInt32(x[1])));

QUERY:
	SELECT folder, COUNT(1)
	FROM mail_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND unread = TRUE AND is_removed = FALSE
	GROUP BY folder
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>772</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
6. private List<MailFolderInfo> RecalculateFolders(IDbManager db, int tenant, string user)

	db.ExecuteNonQuery(
		new SqlInsert(MAIL_FOLDER, true)
			.InColumnValue(FolderFields.id_tenant, tenant)
			.InColumnValue(FolderFields.id_user, user)
			.InColumnValue(FolderFields.folder, folder.id)
			.InColumnValue(FolderFields.unread, unread));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.MailBoxes.cs										  --
------------------------------------------------------------------------------------------------
1. public bool SaveMailBox(MailBox mail_box)

	result = db.ExecuteNonQuery(
		new SqlInsert(MAIL_MAILBOX)
			.InColumnValue(MailBoxFields.id_tenant, mail_box.TenantId)
			.InColumnValue(MailBoxFields.id_user, mail_box.UserId)
			.InColumnValue(MailBoxFields.address, GetAddress(mail_box.EMail))
			.InColumnValue(MailBoxFields.name, mail_box.Name)
			.InColumnValue(MailBoxFields.server,
						   string.Format("{0}:{1}", mail_box.Server, mail_box.Port).ToLowerInvariant())
			.InColumnValue(MailBoxFields.account, mail_box.Account)
			.InColumnValue(MailBoxFields.password, EncryptPassword(mail_box.Password))
			.InColumnValue(MailBoxFields.ssl_enabled, mail_box.UseIncomingSsl)
			.InColumnValue(MailBoxFields.ssl_outgoing, mail_box.UseOutgoingSsl)
			.InColumnValue(MailBoxFields.msg_count_last, mail_box.MessagesCount)
			.InColumnValue(MailBoxFields.smtp_server,
						   string.Format("{0}:{1}", mail_box.SmtpServer, mail_box.SmtpPort)
								 .ToLowerInvariant())
			.InColumnValue(MailBoxFields.smtp_auth, mail_box.SmtpAuth)
			.InColumnValue(MailBoxFields.smtp_password,
						   string.IsNullOrEmpty(mail_box.SmtpPassword)
							   ? EncryptPassword(mail_box.Password)
							   : EncryptPassword(mail_box.SmtpPassword))
			.InColumnValue(MailBoxFields.smtp_account,
						   string.IsNullOrEmpty(mail_box.SmtpAccount)
							   ? mail_box.Account
							   : mail_box.SmtpAccount)
			.InColumnValue(MailBoxFields.size_last, mail_box.Size)
			.InColumnValue(MailBoxFields.login_delay,
						   mail_box.ServerLoginDelay < MailBox.DefaultServerLoginDelay
							   ? MailBox.DefaultServerLoginDelay
							   : mail_box.ServerLoginDelay)
			.InColumnValue(MailBoxFields.enabled, true)
			.InColumnValue(MailBoxFields.imap, mail_box.Imap)
			.InColumnValue(MailBoxFields.begin_date, mail_box.BeginDate)
			.InColumnValue(MailBoxFields.service_type, mail_box.ServiceType)
			.InColumnValue(MailBoxFields.refresh_token, mail_box.RefreshToken));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
2. public bool SaveMailBox(MailBox mail_box)

	var query_update = new SqlUpdate(MAIL_MAILBOX)
		.Where(MailBoxFields.id, id_mailbox)
		.Set(MailBoxFields.id_tenant, mail_box.TenantId)
		.Set(MailBoxFields.id_user, mail_box.UserId)
		.Set(MailBoxFields.address, GetAddress(mail_box.EMail))
		.Set(MailBoxFields.name, mail_box.Name)
		.Set(MailBoxFields.server,
			 string.Format("{0}:{1}", mail_box.Server, mail_box.Port).ToLowerInvariant())
		.Set(MailBoxFields.account, mail_box.Account)
		.Set(MailBoxFields.password, EncryptPassword(mail_box.Password))
		.Set(MailBoxFields.ssl_enabled, mail_box.UseIncomingSsl)
		.Set(MailBoxFields.ssl_outgoing, mail_box.UseOutgoingSsl)
		.Set(MailBoxFields.msg_count_last, mail_box.MessagesCount)
		.Set(MailBoxFields.smtp_server,
			 string.Format("{0}:{1}", mail_box.SmtpServer, mail_box.SmtpPort).ToLowerInvariant())
		.Set(MailBoxFields.smtp_auth, mail_box.SmtpAuth)
		.Set(MailBoxFields.smtp_password,
			 string.IsNullOrEmpty(mail_box.SmtpPassword)
				 ? EncryptPassword(mail_box.Password)
				 : EncryptPassword(mail_box.SmtpPassword))
		.Set(MailBoxFields.smtp_account,
			 string.IsNullOrEmpty(mail_box.SmtpAccount) ? mail_box.Account : mail_box.SmtpAccount)
		.Set(MailBoxFields.size_last, mail_box.Size)
		.Set(MailBoxFields.login_delay,
			 mail_box.ServerLoginDelay < MailBox.DefaultServerLoginDelay
				 ? MailBox.DefaultServerLoginDelay
				 : mail_box.ServerLoginDelay)
		.Set(MailBoxFields.is_removed, false)
		.Set(MailBoxFields.imap, mail_box.Imap)
		.Set(MailBoxFields.begin_date, mail_box.BeginDate)
		.Set(MailBoxFields.service_type, mail_box.ServiceType)
		.Set(MailBoxFields.refresh_token, mail_box.RefreshToken);

	if (mail_box.BeginDate == MIN_BEGIN_DATE)
		query_update.Set(MailBoxFields.imap_folders, "[]");

	result = db.ExecuteNonQuery(query_update);

QUERY:
	SELECT *
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
3. public bool UpdateEnableFlag(int id_tenant, string id_user, string email, bool new_value)

	var result = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id, id_mailbox)
			.Set(MailBoxFields.enabled, new_value));

QUERY:
	SELECT *
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
4. public void RemoveMailBox(MailBox mail_box)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Set(MailBoxFields.is_removed, true)
			.Where(MailBoxFields.id, mail_box.MailBoxId));

QUERY:
	SELECT *
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
5. public void RemoveMailBox(MailBox mail_box)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_CHAIN)
			.Where(GetUserWhere(mail_box.UserId, mail_box.TenantId))
			.Where(ChainFields.id_mailbox, mail_box.MailBoxId));

QUERY:
	SELECT *
	FROM mail_chain
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_chain</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
6.  public void RemoveMailBox(MailBox mail_box)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Set(MailFields.is_removed, true)
			.Where(MailFields.id_mailbox, mail_box.MailBoxId)
			.Where(GetUserWhere(mail_box.UserId, mail_box.TenantId)));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id_mailbox = 1 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
7. public void RemoveMailBox(MailBox mail_box)

	var query =
		string.Format(
			"Update {0} a INNER JOIN {1} m ON a.{2} = m.{3} SET a.{4} = {5} WHERE m.{6} = {7}",
			MAIL_ATTACHMENT, MAIL_MAIL, AttachmentFields.id_mail, MailFields.id,
			AttachmentFields.need_remove, true, MailFields.id_mailbox, mail_box.MailBoxId);

	db.ExecuteNonQuery(query);

QUERY:
	SELECT *
	FROM mail_attachment a INNER JOIN 
	mail_mail m ON a.id_mail = m.id
	WHERE m.id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>m</table>
			<type>ref</type>
			<possible_keys>PRIMARY,id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra></Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>a</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>4</key_len>
			<ref>test.m.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
8. public void RemoveMailBox(MailBox mail_box)

	query = string.Format("Select t.{0} FROM {1} t INNER JOIN {2} m ON t.{3} = m.{4} WHERE m.{5} = {6}",
			TagMailFields.id_tag, MAIL_TAG_MAIL, MAIL_MAIL, TagMailFields.id_mail, MailFields.id,
			MailFields.id_mailbox, mail_box.MailBoxId);

	var affected_tags = db.ExecuteList(query).ConvertAll(r => Convert.ToInt32(r[0])).Distinct();

QUERY:
	SELECT t.id_tag 
	FROM mail_tag_mail t INNER JOIN 
	mail_mail m ON t.id_mail = m.id 
	WHERE m.id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>m</table>
			<type>ref</type>
			<possible_keys>PRIMARY,id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra>Using index</Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>test.m.id</ref>
			<rows>1</rows>
			<Extra>Using index</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
9. public void RemoveMailBox(MailBox mail_box)

	query = string.Format("Delete t FROM {0} t INNER JOIN {1} m ON t.{2} = m.{3} WHERE m.{4} = {5}",
			MAIL_TAG_MAIL, MAIL_MAIL, TagMailFields.id_mail, MailFields.id,
			MailFields.id_mailbox, mail_box.MailBoxId);

	db.ExecuteNonQuery(query);

QUERY:
	SELECT * 
	FROM mail_tag_mail t INNER JOIN 
	mail_mail m ON t.id_mail = m.id 
	WHERE m.id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>m</table>
			<type>ref</type>
			<possible_keys>PRIMARY,id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra></Extra>
		</row>
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>test.m.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
10. public clientConfig GetMailBoxSettings(string host)

	var id_provider = db.ExecuteScalar<int>(
		new SqlQuery(MAIL_MAILBOX_DOMAIN)
			.Select(MailBoxDomainFields.id_provider)
			.Where(MailBoxDomainFields.name, host));

QUERY:
	SELECT id_provider
	FROM mail_mailbox_domain
	WHERE name = 'mail.ru' 
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_domain</table>
			<type>ref</type>
			<possible_keys>id_provider</possible_keys>
			<key>id_provider</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
11. public clientConfig GetMailBoxSettings(string host)

	var provider = db.ExecuteList(
		new SqlQuery(MAIL_MAILBOX_PROVIDER)
			.Select(MailBoxProviderFields.name, MailBoxProviderFields.display_name, MailBoxProviderFields.display_short_name, MailBoxProviderFields.documentation)
			.Where(MailBoxProviderFields.id, id_provider))
			.FirstOrDefault();

QUERY:
	SELECT name, display_name, display_short_name, documentation
	FROM mail_mailbox_provider
	WHERE id = 107
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_provider</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
12. public clientConfig GetMailBoxSettings(string host)

	var servers = db.ExecuteList(
		new SqlQuery(MAIL_MAILBOX_SERVER)
			.Select(MailBoxServerFields.hostname, MailBoxServerFields.port, MailBoxServerFields.type,
			MailBoxServerFields.socket_type, MailBoxServerFields.username, MailBoxServerFields.authentication)
			.Where(MailBoxServerFields.id_provider, id_provider));

QUERY:
	SELECT hostname, port, type, socket_type, username, authentication
	FROM mail_mailbox_server
	WHERE id_provider = 107
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_server</table>
			<type>ref</type>
			<possible_keys>id_provider</possible_keys>
			<key>id_provider</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>2</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
13. public bool SetMailBoxSettings(clientConfig config)

	var id_provider = db.ExecuteScalar<int>(
		new SqlQuery(MAIL_MAILBOX_PROVIDER)
			.Select(MailBoxProviderFields.id)
			.Where(MailBoxProviderFields.name, config.emailProvider.id));

QUERY:
	SELECT id
	FROM mail_mailbox_provider
	WHERE name = 'mail.ru'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_provider</table>
			<type>ALL</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>217</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
14. public bool SetMailBoxSettings(clientConfig config)

	var id_provider = db.ExecuteScalar<int>(
		new SqlInsert(MAIL_MAILBOX_PROVIDER)
			.InColumnValue(MailBoxProviderFields.id, 0)
			.InColumnValue(MailBoxProviderFields.name, config.emailProvider.id)
			.InColumnValue(MailBoxProviderFields.display_name, config.emailProvider.displayName)
			.InColumnValue(MailBoxProviderFields.display_short_name, config.emailProvider.displayShortName)
			.InColumnValue(MailBoxProviderFields.documentation, config.emailProvider.documentation.url)
			.Identity(0, 0, true));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
15. public bool SetMailBoxSettings(clientConfig config)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_MAILBOX_DOMAIN)
			.Where(MailBoxDomainFields.id_provider, id_provider));

QUERY:
	SELECT *
	FROM mail_mailbox_domain
	WHERE id_provider = 107
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_domain</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>id_provider</key>
			<key_len>771</key_len>
			<ref isnull="true" />
			<rows>773</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
16. public bool SetMailBoxSettings(clientConfig config)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_MAILBOX_SERVER)
			.Where(MailBoxServerFields.id_provider, id_provider));

QUERY:
	SELECT *
	FROM mail_mailbox_server
	WHERE id_provider = 107
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox_server</table>
			<type>ref</type>
			<possible_keys>id_provider</possible_keys>
			<key>id_provider</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>2</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
17. public bool SetMailBoxSettings(clientConfig config)

	var insert_query = string.Format("INSERT IGNORE INTO {0} ({1}, {2}) VALUES {3};",
		MAIL_MAILBOX_DOMAIN, MailBoxDomainFields.id_provider, MailBoxDomainFields.name, string.Join(", ", values.ToArray()));

	db.ExecuteNonQuery(insert_query);

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
18. public bool SetMailBoxSettings(clientConfig config)

	insert_query = string.Format("INSERT IGNORE INTO {0} ({1}, {2}, {3}, {4}, {5}, {6}, {7}) VALUES {8};",
		MAIL_MAILBOX_SERVER,
		MailBoxServerFields.id_provider,
		MailBoxServerFields.type,
		MailBoxServerFields.hostname,
		MailBoxServerFields.port,
		MailBoxServerFields.socket_type,
		MailBoxServerFields.username,
		MailBoxServerFields.authentication,
		string.Join(", ", values.ToArray()));

	db.ExecuteNonQuery(insert_query);

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
19. private List<MailBox> GetMailBoxes(Exp where)

	1. var where = Exp.Empty;
            if (id_tenant != Tenant.DEFAULT_TENANT) where = where & Exp.Eq(MailBoxFields.id_tenant, id_tenant);
            if (!string.IsNullOrEmpty(id_user)) where = where & Exp.Eq(MailBoxFields.id_user, id_user.ToLowerInvariant());
			
	2. var where = Exp.Eq(MailBoxFields.address, GetAddress(email)) &
                Exp.Eq(MailBoxFields.id_tenant, id_tenant) &
                Exp.Eq(MailBoxFields.id_user, id_user);
			
	var res = db.ExecuteList(new SqlQuery(MAIL_MAILBOX)
		.Select(MailBoxFields.id_tenant,
			MailBoxFields.id_user,
			MailBoxFields.name,
			MailBoxFields.address,
			MailBoxFields.account,
			MailBoxFields.password,
			MailBoxFields.server,
			MailBoxFields.ssl_enabled,
			MailBoxFields.size_last,
			MailBoxFields.msg_count_last,
			MailBoxFields.smtp_server,
			MailBoxFields.smtp_password,
			MailBoxFields.smtp_account,
			MailBoxFields.smtp_auth,
			MailBoxFields.login_delay,
			MailBoxFields.id,
			MailBoxFields.enabled,
			MailBoxFields.quota_error,
			MailBoxFields.auth_error,
			MailBoxFields.imap,
			MailBoxFields.begin_date,
			MailBoxFields.service_type,
			MailBoxFields.refresh_token,
			MailBoxFields.ssl_outgoing,
			MailBoxFields.imap_folders)
			.Where(MailBoxFields.is_removed, false)
			.Where(where)
			.OrderBy(1, true)
			.OrderBy(2, true));
	var res = db.ExecuteList(query);

QUERY:
	1. 
	SELECT tenant, id_user, name, address, pop3_account, pop3_password, pop3_server, ssl_enabled, 
	size_last, msg_count_last, smtp_server, smtp_password, smtp_account, smtp_auth,
	login_delay, id, enabled, auth_error, imap, begin_date, service_type, refresh_token,
	ssl_outgoing, imap_folders
	FROM mail_mailbox
	WHERE is_removed = false AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
	ORDER BY 1,2
	2. 
	SELECT tenant, id_user, name, address, pop3_account, pop3_password, pop3_server, ssl_enabled, 
	size_last, msg_count_last, smtp_server, smtp_password, smtp_account, smtp_auth,
	login_delay, id, enabled, auth_error, imap, begin_date, service_type, refresh_token,
	ssl_outgoing, imap_folders
	FROM mail_mailbox
	WHERE is_removed = false AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND address = 'test@mail.ru'
	ORDER BY 1,2
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>ref</type>
			<possible_keys>user_id_index</possible_keys>
			<key>user_id_index</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>ref</type>
			<possible_keys>address_index,user_id_index</possible_keys>
			<key>address_index</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
20. private void GetMailBoxState(int id, out bool is_removed, out bool is_deactivated, out DateTime begin_date)

	var res = db.ExecuteList(
		new SqlQuery(MAIL_MAILBOX)
			.Select(MailBoxFields.is_removed, MailBoxFields.enabled, MailBoxFields.begin_date)
			.Where(Exp.Eq(MailBoxFields.id, id)))
			.FirstOrDefault();

QUERY:
	SELECT is_removed, enabled, begin_date
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
21. private int MailBoxExists(string address, string id_user, int tenant)

	db.ExecuteScalar<int>(
		new SqlQuery(MAIL_MAILBOX)
			.Select(MailBoxFields.id)
			.Where(GetUserWhere(id_user, tenant))
			.Where(MailBoxFields.address, address)
			.Where(MailBoxFields.is_removed, false));

QUERY:
	SELECT id
	FROM mail_mailbox
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND address = 'test@mail.ru' AND is_removed = false 
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>ref</type>
			<possible_keys>address_index,user_id_index</possible_keys>
			<key>address_index</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Messages.cs										  --
------------------------------------------------------------------------------------------------
1. public void SetReadFlags(int tenant, string user, IEnumerable<int> ids, bool is_read)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(new InExp(MailFields.id, message_ids.Select(x => (object)x).ToArray()))
			.Where(GetUserWhere(user, tenant))
			.Set(MailFields.unread, !is_read));

QUERY:
	SELECT * 
	FROM mail_mail
	WHERE id in (1,2,3,4,5) AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND unread = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
2. public void DeleteMessagesInTransaction(int id_tenant, string id_user, IEnumerable<int> message_ids)

	delete_messages_info = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(Exp.In(MailFields.id, message_ids.ToList()))
			.Select(MailFields.id, MailFields.folder, MailFields.unread));

QUERY:
	SELECT id, folder, unread
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id in (1,2,3,4,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
3. public void DeleteAllItems(int id_tenant, string id_user, int folder)

	messages_ids = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id, MailFields.folder, MailFields.unread)
			.Where(MailFields.is_removed, false)
			.Where(MailFields.folder, folder)
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT id, folder, unread
	FROM mail_mail 
	WHERE is_removed = false AND folder = 1 AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
4. public void RemoveAllItems(int id_tenant, string id_user, int folder)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(MailFields.folder, folder)
			.Set(MailFields.folder, MailFolder.Trash.Id));

QUERY:
	SELECT *
	FROM mail_mail 
	WHERE folder = 1 AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
5. public void UpdateMailFlags(int id_tenant, string id_user, MailMessageItem item)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(MailFields.id, item.Id)
			.Set(MailFields.is_answered, item.IsAnswered)
			.Set(MailFields.is_forwarded, item.IsForwarded)
			.Set(MailFields.unread, item.IsNew));

QUERY:
	SELECT *
	FROM mail_mail 
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
6. public void GetStoredMessagesUIDL_MD5(int mailbox_id, Dictionary<int, string> uidl_list, Dictionary<int, string> md5_list)

	db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id, MailFields.uidl, MailFields.md5)
			.Where(MailFields.id_mailbox, mailbox_id))

QUERY:
	SELECT id, uidl, md5
	FROM mail_mail 
	WHERE id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
7. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, string uidl, string md5, bool save_attachments)

	var insert = new SqlInsert(MAIL_MAIL, true)
		.InColumnValue(MailFields.id, mail_id)
		.InColumnValue(MailFields.id_mailbox, mail_box.MailBoxId)
		.InColumnValue(MailFields.id_tenant, mail_box.TenantId)
		.InColumnValue(MailFields.id_user, mail_box.UserId)
		.InColumnValue(MailFields.address, address)
		.InColumnValue(MailFields.uidl, !string.IsNullOrEmpty(uidl) ? uidl : null)
		.InColumnValue(MailFields.md5, !string.IsNullOrEmpty(md5) ? md5 : null)
		.InColumnValue(MailFields.from, mail.From)
		.InColumnValue(MailFields.to, mail.To)
		.InColumnValue(MailFields.reply, mail.ReplyTo)
		.InColumnValue(MailFields.subject, mail.Subject)
		.InColumnValue(MailFields.cc, mail.Cc)
		.InColumnValue(MailFields.bcc, mail.Bcc)
		.InColumnValue(MailFields.importance, mail.Important)
		.InColumnValue(MailFields.date_received, DateTime.UtcNow)
		.InColumnValue(MailFields.date_sent, mail.Date.ToUniversalTime())
		.InColumnValue(MailFields.size, mail.Size)
		.InColumnValue(MailFields.attach_count, !save_attachments ? count_attachments : (mail.Attachments != null ? mail.Attachments.Count : 0))
		.InColumnValue(MailFields.unread, unread)
		.InColumnValue(MailFields.is_answered, mail.IsAnswered)
		.InColumnValue(MailFields.is_forwarded, mail.IsForwarded)
		.InColumnValue(MailFields.stream, mail.StreamId)
		.InColumnValue(MailFields.folder, folder)
		.InColumnValue(MailFields.is_from_crm, mail.IsFromCRM)
		.InColumnValue(MailFields.is_from_tl, mail.IsFromTL)
		.InColumnValue(MailFields.spam, 0)
		.InColumnValue(MailFields.mime_message_id, mail.MessageId)
		.InColumnValue(MailFields.mime_in_reply_to, mail.InReplyTo)
		.InColumnValue(MailFields.chain_id, mail.ChainId)
		.InColumnValue(MailFields.introduction, mail.Introduction)
		.InColumnValue(MailFields.chain_date, mail.Date.ToUniversalTime())
		.Identity(0, 0, true);

	id_mail = db.ExecuteScalar<int>(insert);

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
8. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, string uidl, string md5, bool save_attachments)

	var update = new SqlUpdate(MAIL_MAIL)
		.Where(MailFields.id, mail_id)
		.Set(MailFields.from, mail.From)
		.Set(MailFields.to, mail.To)
		.Set(MailFields.reply, mail.ReplyTo)
		.Set(MailFields.subject, mail.Subject)
		.Set(MailFields.cc, mail.Cc)
		.Set(MailFields.bcc, mail.Bcc)
		.Set(MailFields.importance, mail.Important)
		.Set(MailFields.date_received, DateTime.UtcNow)
		.Set(MailFields.date_sent, mail.Date.ToUniversalTime())
		.Set(MailFields.size, mail.Size)
		.Set(MailFields.attach_count, !save_attachments ? count_attachments : (mail.Attachments != null ? mail.Attachments.Count : 0))
		.Set(MailFields.unread, unread)
		.Set(MailFields.is_answered, mail.IsAnswered)
		.Set(MailFields.is_forwarded, mail.IsForwarded)
		.Set(MailFields.stream, mail.StreamId)
		.Set(MailFields.folder, folder)
		.Set(MailFields.is_from_crm, mail.IsFromCRM)
		.Set(MailFields.is_from_tl, mail.IsFromTL)
		.Set(MailFields.spam, 0);

	if (!string.IsNullOrEmpty(mail.MessageId)) update.Set(MailFields.mime_message_id, mail.MessageId);
	if (!string.IsNullOrEmpty(mail.InReplyTo)) update.Set(MailFields.mime_in_reply_to, mail.InReplyTo);
	if (!string.IsNullOrEmpty(mail.ChainId)) update.Set(MailFields.chain_id, mail.ChainId);

	db.ExecuteNonQuery(update);

QUERY:
	SELECT *
	FROM mail_mail 
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
9. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, string uidl, string md5, bool save_attachments)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_ATTACHMENT)
			.Set(AttachmentFields.need_remove, true)
			.Where(AttachmentFields.id_mail, id_mail));

QUERY:
	SELECT *
	FROM mail_attachment 
	WHERE id_mail = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_attachment</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
10. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, string uidl, string md5, bool save_attachments)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG_MAIL)
			.Where(TagMailFields.id_mail, id_mail));

QUERY:
	SELECT *
	FROM mail_tag_mail 
	WHERE id_mail = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
11. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, string uidl, string md5, bool save_attachments)

	var tag_addresses_tag_ids = db.ExecuteList(
		new SqlQuery(MAIL_TAG_ADDRESSES)
			.Distinct()
			.Select(TagAddressFields.id_tag)
			.Where(TagAddressFields.address, mail.FromEmail)
			.Where(Exp.In(TagAddressFields.id_tag,
				new SqlQuery(MAIL_TAG)
					.Select(TagFields.id)
					.Where(GetUserWhere(mail_box.UserId, mail_box.TenantId)))))
					.ConvertAll(r => Convert.ToInt32(r[0]));

QUERY:
	SELECT DISTINCT id_tag
	FROM mail_tag_addresses
	WHERE address = 'test@mail.ru' AND id_tag in (SELECT id FROM mail_tag WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6')
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_tag_addresses</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>PRIMARY</key>
			<key_len>775</key_len>
			<ref isnull="true" />
			<rows>188</rows>
			<Extra>Using where; Using index</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>mail_tag</table>
			<type>unique_subquery</type>
			<possible_keys>PRIMARY,username</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>func</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов;Возможно можно упростить? JOIN ?
------------------------------------------------------------------------------------------------
12. public void UpdateMessagesChains(DbManager db, MailBox mailbox, string mime_message_id, string chain_id, int folder)

	var query = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.chain_id, MailFields.folder)
			.Where(Exp.Eq(MailFields.mime_in_reply_to, mime_message_id))
			.Where(MailFields.is_removed, false)
			.Where(MailFields.id_mailbox, mailbox.MailBoxId));

QUERY:
	SELECT chain_id, folder
	FROM mail_mail 
	WHERE mime_in_reply_to = '1111' AND is_removed = false AND id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
13. public void UpdateMessagesChains(DbManager db, MailBox mailbox, string mime_message_id, string chain_id, int folder)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Set(MailFields.chain_id, chain_id)
			.Where(Exp.In(MailFields.chain_id, child_chain_ids))
			.Where(MailFields.id_mailbox, mailbox.MailBoxId)
			.Where(MailFields.is_removed, false));

QUERY:
	SELECT *
	FROM mail_mail 
	WHERE chain_id = '1111' AND id_mailbox = 1 AND is_removed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>chain_index_folders,id_mailbox</possible_keys>
			<key>chain_index_folders</key>
			<key_len>772</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;
------------------------------------------------------------------------------------------------
14. public void UpdateMessagesChains(DbManager db, MailBox mailbox, string mime_message_id, string chain_id, int folder)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_CHAIN)
			.Where(GetUserWhere(mailbox.UserId, mailbox.TenantId))
			.Where(Exp.In(ChainFields.id, child_chain_ids))
			.Where(ChainFields.id_mailbox, mailbox.MailBoxId));

QUERY:
	SELECT *
	FROM mail_chain
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id IN ('1111', '222', '333') AND id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_chain</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>1542</key_len>
			<ref isnull="true" />
			<rows>3</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
15. public string DetectChainId(MailBox mailbox, string mime_message_id, string mime_in_reply_to)

	var query_result = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.chain_id)
			.Where(Exp.Eq(MailFields.mime_message_id, mime_in_reply_to))
			.Where(MailFields.is_removed, false)
			.Where(MailFields.id_mailbox, mailbox.MailBoxId));

QUERY:
	SELECT chain_id
	FROM mail_mail 
	WHERE mime_in_reply_to = '1111' AND is_removed = false AND id_mailbox = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
16. public MailMessageItem GetMailInfo(int tenant, string id_user, int mail_id, bool not_block_content, bool load_content)

	db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
		   .Select(MailFields.address,
			MailFields.importance, "2",
			MailFields.date_sent, MailFields.from, MailFields.to,
			MailFields.cc, MailFields.bcc, MailFields.reply,
			MailFields.stream, MailFields.is_answered, MailFields.is_forwarded,
			MailFields.subject, MailFields.attach_count, MailFields.size, "15",
			MailFields.is_from_crm, MailFields.is_from_tl, MailFields.folder,
			MailFields.unread, MailFields.introduction)
		   .Where(GetUserWhere(id_user, tenant))
		   .Where(MailFields.id, mail_id));

QUERY:
	SELECT address, importance, '2', date_sent, from_text, to_text, cc, bcc, reply_to, stream, is_answered, is_forwarded, subject
	attachments_count, size, '15', is_from_crm, is_from_tl, folder, unread, introduction
	FROM mail_mail 
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id = 278
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
17. public MailMessageItem GetMailInfo(int tenant, string id_user, int mail_id, bool not_block_content, bool load_content)

	db.ExecuteList(
		new SqlQuery(MAIL_TAG_MAIL)
			.Select(TagMailFields.id_tag)
			.Where(TagMailFields.id_mail, mail_id);

QUERY:
	SELECT id_tag
	FROM mail_tag_mail
	WHERE id_mail = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using index</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
18. public MailMessageItem GetMailInfo(int tenant, string id_user, int mail_id, bool not_block_content, bool load_content)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Set(MailFields.introduction, introduction)
			.Where(MailFields.id, mail_id));

QUERY:
	SELECT *
	FROM mail_tag_mail 
	WHERE id_mail = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
19. public MailMessageItem GetMailInfo(int tenant, string id_user, int mail_id, bool not_block_content, bool load_content)

	db.ExecuteList(
		new SqlQuery(MAIL_ATTACHMENT)
			.Select(AttachmentFields.name, AttachmentFields.type, AttachmentFields.size, AttachmentFields.file_number, AttachmentFields.id)
			.Where(AttachmentFields.id_mail, mail_id)
			.Where(AttachmentFields.need_remove, false)
			.Where(Exp.Eq(AttachmentFields.content_id, Exp.Empty)));

QUERY:
	SELECT name, type, size, file_number, id
	FROM mail_attachment 
	WHERE id_mail = 1 AND need_remove = false AND content_id = ''
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_attachment</table>
			<type>ref</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>8</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
20. public List<MailMessageItem> GetSingleMailsFiltered(int id_tenant, string id_user, MailFilter filter, int page, int page_size, out long total_messages_count)

	var q_filtered = new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id, MailFields.chain_id)
			.Where(MailFields.is_removed, false)
			.Where(GetUserWhere(id_user, id_tenant))
			.ApplyFilter(filter);

	// Filter and sort all existing messages and get their ids and chain_ids
	var filtered_ids = db.ExecuteList(q_filtered)
		.ConvertAll(r => new { id = Convert.ToInt32(r[0]), chain_id = (string)r[1] });

QUERY:
	1. -- Only filter.PrimaryFolder
	SELECT id, chain_id
	FROM mail_mail
	WHERE tenant = 0 AND 
	id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND 
	is_removed = FALSE AND 
	folder = 1;
	2. -- All filter parameters
	SELECT id, chain_id
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1 AND id IN (
	SELECT id_mail
	FROM (
	SELECT id_mail
	FROM mail_tag_mail
	WHERE id_tag IN (244, 255)) AS a
	GROUP BY id_mail
	HAVING COUNT(a.id_mail)=1) AND 
	unread = true AND 
	attachments_count > 0 AND 
	date_sent BETWEEN '12.09.2012 20:00:00' AND '13.03.2013 20:00:00' AND 
	importance = true AND address = 'profi.troll.4test@gmail.com' AND 
	from_text like 'profi.troll.4test@gmail.com' AND
	(from_text LIKE 'docs' OR to_text LIKE 'docs' OR cc LIKE 'docs' OR bcc LIKE 'docs' OR subject LIKE 'docs')
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where</Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>&lt;derived3&gt;</table>
			<type>ALL</type>
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows>2</rows>
			<Extra>Using temporary; Using filesort</Extra>
		</row>
		<row>
			<id>3</id>
			<select_type>DERIVED</select_type>
			<table>mail_tag_mail</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>2248</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Возможно можно упростить?
------------------------------------------------------------------------------------------------
21. public List<MailMessageItem> GetSingleMailsFiltered(int id_tenant, string id_user, MailFilter filter, int page, int page_size, out long total_messages_count)

	const string select_chain_length = "1";
	var concat_tag_ids = String.Format("(SELECT CAST(group_concat(tm.{0} ORDER BY tm.{3} SEPARATOR ',') AS CHAR) from {1} as tm WHERE tm.{2} = `id`) tagIds",
                TagMailFields.id_tag, MAIL_TAG_MAIL, TagMailFields.id_mail, TagMailFields.time_created);

	var ids_set = final_ids_set as IList<int> ?? final_ids_set.ToList();
	total_messages_count = ids_set.Count();
	page = Math.Min(page, (int)Math.Ceiling((double)total_messages_count / page_size));

	var query_messages = new SqlQuery(MAIL_MAIL + " as outer_mail")
		.Select(MailFields.id, MailFields.from, MailFields.to,
		MailFields.reply, MailFields.subject, MailFields.importance,
		"1", MailFields.date_sent, MailFields.size,
		MailFields.attach_count, MailFields.unread, MailFields.is_answered,
		MailFields.is_forwarded, MailFields.is_from_crm, MailFields.is_from_tl,
		concat_tag_ids, MailFields.folder_restore,
		MailFields.chain_id, select_chain_length, MailFields.folder)
		.Where(Exp.In(MailFields.id, ids_set.ToArray()))
		.Where(MailFields.is_removed, false)
		.Where(GetUserWhere(id_user, id_tenant))
		.ApplySorting(filter)
		.SetFirstResult((page - 1) * page_size)
		.SetMaxResults(page_size);

	var list = db.ExecuteList(query_messages)

QUERY:
	1.
	SELECT id, from_text, to_text, reply_to, subject, importance, '1', date_sent, size, attachments_count, unread, is_answered, 
	is_forwarded, is_from_crm, is_from_tl, 
	(SELECT CAST(group_concat(tm.id_tag ORDER BY tm.time_created SEPARATOR ',') AS CHAR) from mail_tag_mail as tm WHERE tm.id_mail = `id`) tagIds,
	folder_restore, chain_id, '1', folder
	FROM mail_mail
	WHERE 
	tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1
	ORDER BY date_sent DESC
	LIMIT 1, 25; 
	2.
	SELECT id, from_text, to_text, reply_to, subject, importance, '1', date_sent, size, attachments_count, unread, is_answered, 
	is_forwarded, is_from_crm, is_from_tl, 
	(SELECT CAST(group_concat(tm.id_tag ORDER BY tm.time_created SEPARATOR ',') AS CHAR) from mail_tag_mail as tm WHERE tm.id_mail = `id`) tagIds,
	folder_restore, chain_id, '1', folder
	FROM mail_mail
	WHERE 
	tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1
	ORDER BY subject DESC
	LIMIT 1, 25; 
	3.
	SELECT id, from_text, to_text, reply_to, subject, importance, '1', date_sent, size, attachments_count, unread, is_answered, 
	is_forwarded, is_from_crm, is_from_tl, 
	(SELECT CAST(group_concat(tm.id_tag ORDER BY tm.time_created SEPARATOR ',') AS CHAR) from mail_tag_mail as tm WHERE tm.id_mail = `id`) tagIds,
	folder_restore, chain_id, '1', folder
	FROM mail_mail
	WHERE 
	tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = FALSE AND folder = 1
	ORDER BY from_text DESC
	LIMIT 1, 25; 
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where; Using filesort</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>tm</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>test.mail_mail.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where; Using filesort</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>tm</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>test.mail_mail.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>
	3.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>PRIMARY</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref>const,const,const,const</ref>
			<rows>105</rows>
			<Extra>Using where; Using filesort</Extra>
		</row>
		<row>
			<id>2</id>
			<select_type>DEPENDENT SUBQUERY</select_type>
			<table>tm</table>
			<type>ref</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref>test.mail_mail.id</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Возможно можно упростить?
------------------------------------------------------------------------------------------------
22. public List<MailMessageItem> GetConversationMessages(int id_tenant, string id_user, int message_id, bool load_all_content)

	var get_message_info = new SqlQuery(MAIL_MAIL)
		.Select(MailFields.chain_id, MailFields.id_mailbox, MailFields.folder)
		.Where(MailFields.is_removed, false)
		.Where(GetUserWhere(id_user, id_tenant))
		.Where(MailFields.id, message_id);
	db.ExecuteList(get_message_info);

QUERY:
	SELECT chain_id, id_mailbox, folder
	FROM mail_mail
	WHERE is_removed = false AND tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND id = 278
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
23. public List<MailMessageItem> GetConversationMessages(int id_tenant, string id_user, int message_id, bool load_all_content)

	var get_messages_ids =
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id)
			.Where(MailFields.id_mailbox, message_info.mailbox_id)
			.Where(MailFields.chain_id, message_info.chain_id)
			.Where(Exp.In(MailFields.folder, search_folders.ToArray()))
			.Where(MailFields.is_removed, 0)
			.OrderBy(MailFields.date_sent, true);

	var query_result = db.ExecuteList(get_messages_ids);

QUERY:
	SELECT id
	FROM mail_mail
	WHERE id_mailbox = 1 AND chain_id = '<111>' AND folder IN (1, 2, 3, 4, 5) AND is_removed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>chain_index_folders,id_mailbox</possible_keys>
			<key>chain_index_folders</key>
			<key_len>776</key_len>
			<ref isnull="true" />
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
24. public void RestoreMessages(int id_tenant, string id_user, IEnumerable<int> ids)

	var mails_info = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
		   .Select(MailFields.id, MailFields.unread, MailFields.folder,
				   MailFields.folder_restore, MailFields.chain_id,
				   MailFields.id_mailbox)
		   .Where(GetUserWhere(id_user, id_tenant))
		   .Where(MailFields.is_removed, false)
		   .Where(Exp.In(MailFields.id, message_ids.ToArray()))
		   .Distinct());

QUERY:
	SELECT DISTINCT id, unread, folder, folder_restore, chain_id, id_mailbox
	FROM mail_mail
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND is_removed = false AND id IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>772</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
25. public void RestoreMessages(int id_tenant, string id_user, IEnumerable<int> ids)

	var query = string.Format("Update {0} SET {1} = {2} WHERE {3} IN ({4}) AND {5} = '{6}' AND {7} = {8}",
		MAIL_MAIL, MailFields.folder, MailFields.folder_restore, MailFields.id,
		string.Join(",", ids_array), MailFields.id_user, id_user, MailFields.id_tenant,
		id_tenant);

	db.ExecuteNonQuery(query);

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id IN (1,2,3,4,5,6) AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
26. private void UpdateMessagesFolder(DbManager db, int tenant, string user_id, List<object[]> mails_info, int folder_id)

	var query = string.Format("Update {0} SET {1} = {2} WHERE {3} IN ({4})",
		MAIL_MAIL, MailFields.folder, folder_id,
		MailFields.id, string.Join(",", ids));

	db.ExecuteNonQuery(query);

QUERY:
	SELECT *
	FROM mail_mail
	WHERE folder = 1 AND id IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
27. public void UpdateChainFields(DbManager db, int tenant, string user_id, string[] list_ids)

	db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
		   .Select(MailFields.id_mailbox, MailFields.chain_id, MailFields.folder)
		   .Where(string.Format("{0} IN ({1})", MailFields.id, string.Join(",", list_ids)))
		   .Distinct());

QUERY:
	SELECT DISTINCT id_mailbox, chain_id, folder
	FROM mail_mail
	WHERE id IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where; Using temporary</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
28. public void SetPreviousMessageFolder(int id_tenant, string id_user, int to_folder, int message_id)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Set(MailFields.folder_restore, to_folder)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(MailFields.id, message_id));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id = 278
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
29. public void SetMessageFolder(int id_tenant, string id_user, int to_folder, IEnumerable<int> message_ids)

	var list_objects = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			 .Select(MailFields.id, MailFields.unread, MailFields.folder, MailFields.chain_id, MailFields.id_mailbox)
			 .Where(string.Format("{0} IN ({1})", MailFields.id, string.Join(",", ids)))
			 .Where(GetUserWhere(id_user, id_tenant))
			 .Where(MailFields.is_removed, false)
			 .Distinct());

QUERY:
	SELECT DISTINCT id, unread, folder, chain_id, id_mailbox
	FROM mail_mail
	WHERE id IN (1,2,3,4,5,6) AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND is_removed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>772</key_len>
			<ref>const,const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
30. public bool UpdateImportance(int id_tenant, string id_user, bool importance, IEnumerable<int> message_ids)

	var affected = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(Exp.In(MailFields.id, enumerable.ToArray()))
			.Where(GetUserWhere(id_user, id_tenant))
			.Set(MailFields.importance, importance));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id IN (1,2,3,4,5,6) AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>main</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
31. public string GetMimeMessageIdByMessageId(int message_id)

	db.ExecuteScalar<string>(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.mime_message_id)
			.Where(MailFields.id, message_id));

QUERY:
	SELECT mime_message_id
	FROM mail_mail
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
32. public void UpdateMessageUidl(int id_tenant, string id_user, int id_message, string new_uidl)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(MailFields.id, id_message)
			.Set(MailFields.uidl, new_uidl));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id = 278
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>const</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
33. private List<object[]> GetMessagesInfoByMimeMessageId(int id_mailbox, int id_tenant, string id_user, string mime_message_id, string[] columns)

	db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(columns)
			.Where(MailFields.mime_message_id, mime_message_id)
			.Where(MailFields.id_mailbox, id_mailbox)
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE mime_message_id = '<111>' AND id_mailbox = 1 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>id_mailbox,time_modified,main</possible_keys>
			<key>id_mailbox</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------	
34. private void DeleteMessages(DbManager db, int id_tenant, string id_user, List<object[]> delete_info, bool re_count_folders)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Set(MailFields.is_removed, true)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(Exp.In(MailFields.id, message_ids)));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
35. private void DeleteMessages(DbManager db, int id_tenant, string id_user, List<object[]> delete_info, bool re_count_folders)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_ATTACHMENT)
			.Set(AttachmentFields.need_remove, true)
			.Where(Exp.In(AttachmentFields.id_mail, message_ids))
			.Where(AttachmentFields.id_tenant, id_tenant));

QUERY:
	SELECT *
	FROM mail_attachment
	WHERE id_mail in (1,2,3,4,5) AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_attachment</table>
			<type>range</type>
			<possible_keys>quota_index,main</possible_keys>
			<key>quota_index</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Много возможных индексов;Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
36. private void DeleteMessages(DbManager db, int id_tenant, string id_user, List<object[]> delete_info, bool re_count_folders)

	db.ExecuteList(
		new SqlQuery(MAIL_TAG_MAIL)
			.Select(TagMailFields.id_tag)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(new InExp(TagMailFields.id_mail,
							message_ids.Select(x => (object)x).ToArray())));

QUERY:
	SELECT id_tag
	FROM mail_tag_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id_mail IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
37. private void DeleteMessages(DbManager db, int id_tenant, string id_user, List<object[]> delete_info, bool re_count_folders)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG_MAIL)
			.Where(Exp.In(TagMailFields.id_mail, message_ids))
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT *
	FROM mail_tag_mail
	WHERE id_mail IN (1,2,3,4,5,6) AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,id_mail</possible_keys>
			<key>PRIMARY</key>
			<key_len>775</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
38. private IEnumerable<object[]> GetMessagesInfo(IDbManager db, int tenant, string user, int[] ids, string[] columns)

	db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(columns)
			.Where(GetUserWhere(user, tenant))
			.Where(Exp.In(MailFields.id, ids))
			.Where(MailFields.is_removed, 0));

QUERY:
	SELECT *
	FROM mail_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id IN (1,2,3,4,5,6) AND is_removed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
39. public void UpdateCrmMessages(int tenant, IEnumerable<string> emails, IEnumerable<string> users)

	string[] emails_array = emails.Distinct().ToArray();
	object[] users_array = users.Select(x => (object) x).ToArray();

	SqlUpdate query = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(MailFields.id_tenant, tenant)
			.Where(MailFields.folder, 1)
			.Where(MailFields.is_removed, false)
			.Where(MailFields.is_from_crm, false);
	
	if (users_array.Length != 0) query.Where(new InExp(MailFields.id_user, users_array));
	
	var exp = Exp.Like(MailFields.from, emails_array[0], SqlLike.AnyWhere)
	for (int i = 1; i < emails_array.Length; i++)
	{
		exp = Exp.Or(exp, Exp.Like(MailFields.from, emails_array[i], SqlLike.AnyWhere));
	}

	query.Where(exp);
	query.Set(MailFields.is_from_crm, true);
	db.ExecuteNonQuery(query);


QUERY:
1.	SELECT * 
	FROM mail_mail
	WHERE tenant = 0 AND folder = 1 AND is_removed = False AND is_from_crm = False 
	AND (from_text LIKE '%landfill@list.ru%' OR from_text LIKE '%mail@deals.biglion.ru%')
	
2.	SELECT * 
	FROM mail_mail
	WHERE tenant = 0 AND folder = 1 AND is_removed = False AND is_from_crm = False 
	AND id_user IN ('657d1d0e-c9f3-4c9d-bd48-07525e539fd6', '939fc6ef-8ecd-42e4-8a87-38809f3a7b98')
	AND (from_text LIKE '%landfill@list.ru%' OR from_text LIKE '%mail@deals.biglion.ru%')
EXPLAIN:

1.	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139333</rows>
			<Extra>Using where</Extra>
		</row>
	</table

2.	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>776</key_len>
			<ref isnull="true" />
			<rows>3095</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов; Возможно упростить?
------------------------------------------------------------------------------------------------
40. public void UpdateCrmMessages(int tenant, IEnumerable<string> emails, IEnumerable<string> users)
	
	string[] emails_array = emails.Distinct().ToArray();
	
	var exp = Exp.Like(MailFields.from, emails_array[0], SqlLike.AnyWhere);
	for (int i = 1; i < emails_array.Length; i++)
	{
		exp = Exp.Or(exp, Exp.Like(MailFields.from, emails_array[i], SqlLike.AnyWhere));
	}
	
	db.ExecuteList(new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id)
			.Where(MailFields.id_tenant, tenant)
			.Where(MailFields.folder, 1)
			.Where(MailFields.is_removed, false)
			.Where(MailFields.is_from_crm, false)
			.Where(Exp.Gt(MailFields.chain_date,
								DateTime.Now.AddMinutes((-1) * time_check).ToUniversalTime()))
			.Where(exp));
	
	

QUERY:
	SELECT * 
	FROM mail_mail
	WHERE tenant = 0 AND folder = 1 AND is_removed = False AND is_from_crm = False 
	AND chain_date > '2013-03-22 12:13:10'
	AND (from_text LIKE '%landfill@list.ru%' OR from_text LIKE '%mail@deals.biglion.ru%')
EXPLAIN:	

	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>ref</type>
			<possible_keys>time_modified,main</possible_keys>
			<key>main</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>139333</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT: Много возможных индексов; Возможно упростить?
------------------------------------------------------------------------------------------------
41. public void UpdateCrmMessages(int tenant, IEnumerable<string> emails, IEnumerable<string> users)

	string[] emails_array = emails.Distinct().ToArray();
	object[] users_array = users.Select(x => (object) x).ToArray();
	
	SqlUpdate query = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAIL)
			.Where(MailFields.id_tenant, tenant)
			.Where(MailFields.folder, 1)
			 .Where(MailFields.is_removed, false)
			.Where(MailFields.is_from_crm, false);
	
	if (users_array.Length != 0) query.Where(new InExp(MailFields.id_user, users_array));
	
	query.Where(Exp.In(MailFields.id, ids));
	query.Set(MailFields.is_from_crm, true);
	db.ExecuteNonQuery(query);


QUERY:
1.	SELECT * 
	FROM mail_mail
	WHERE tenant = 0 AND folder = 1 AND is_removed = False AND is_from_crm = False 
	AND id IN (250562, 250561, 250559, 250215, 250209, 250208)

2.	SELECT * 
	FROM mail_mail
	WHERE tenant = 0 AND folder = 1 AND is_removed = False AND is_from_crm = False 
	AND id IN (250562, 250561, 250559, 250215, 250209, 250208) 
	AND id_user IN ('657d1d0e-c9f3-4c9d-bd48-07525e539fd6', '939fc6ef-8ecd-42e4-8a87-38809f3a7b98')

EXPLAIN:

1.	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>


2.	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>


COMMENT: Много возможных индексов;
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Tags.cs											  --
------------------------------------------------------------------------------------------------
1. private void UnsetTag(DbManager db, int id_tenant, string id_user, int tag_id, List<int> valid_ids, IEnumerable<ChainInfo> chains)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG_MAIL)
			.Where(Exp.And(Exp.Eq(TagMailFields.id_tag, tag_id),
				Exp.In(TagMailFields.id_mail, valid_ids.ToArray()))));

QUERY:
	SELECT *
	FROM mail_tag_mail
	WHERE id_tag = 11 AND id_mail IN (1,2,3,4,5,6)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>range</type>
			<possible_keys>id_mail</possible_keys>
			<key>id_mail</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
2. private void GetValidForUserMessages(DbManager db, int id_tenant, string id_user, IEnumerable<int> messages_ids, out List<int> valid_ids, out List<ChainInfo> chains)

	var valids = db.ExecuteList(
		new SqlQuery(MAIL_MAIL)
			.Select(MailFields.id, MailFields.chain_id, MailFields.folder, MailFields.id_mailbox)
			.Where(Exp.In(MailFields.id, messages_ids.ToArray()))
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT id, chain_id, folder, id_mailbox
	FROM mail_mail
	WHERE id IN (1,2,3,4,5,6) AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mail</table>
			<type>range</type>
			<possible_keys>PRIMARY,time_modified,main</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>6</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
3. public List<MailTag> GetTagsList(int id_tenant, string id_user, bool mail_only)

	db.ExecuteList(
		new SqlQuery(MAIL_TAG)
			.Select(TagFields.id, TagFields.name, TagFields.style, TagFields.addresses, TagFields.count, TagFields.crm_id)
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT id, name, style, addresses, count, crm_id
	FROM mail_tag
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>ref</type>
			<possible_keys>username</possible_keys>
			<key>username</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>19</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
4. public List<MailTag> GetTagsList(int id_tenant, string id_user, bool mail_only)

	var q = new SqlQuery(CRM_TAG + " t")
		.Select("t." + CrmTagFields.id, "t." + CrmTagFields.title)
		.Where(Exp.Eq("t." + CrmTagFields.tenant_id, id_tenant))
		.Where(Exp.Eq("t." + CrmTagFields.entity_type, CRMContactEntityType));

	var crm_tags = db.ExecuteList(q);

QUERY:
	SELECT t.id, t.title
	FROM crm_tag t
	WHERE t.tenant_id = 0 AND t.entity_type = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>t</table>
			<type>ref</type>
			<possible_keys>tenant_id</possible_keys>
			<key>tenant_id</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
5. public bool TagExists(int tenant, string user, string name)

	var result = db.ExecuteScalar<int>(
		new SqlQuery(MAIL_TAG)
			.Select(TagFields.id)
			.Where(GetUserWhere(user, tenant))
			.Where(TagFields.name, name));

QUERY:
	SELECT id
	FROM mail_tag
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND name = 'test'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>ref</type>
			<possible_keys>username</possible_keys>
			<key>username</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>19</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
6. private MailTag GetMailTag(int id_tenant, string id_user, Exp exp)

	1. var exp = new EqExp(TagFields.id, tag_id); 
	2. var exp = new EqExp(TagFields.name, name);
	
	var tag = db.ExecuteList(
		new SqlQuery(MAIL_TAG)
			.Select(TagFields.id, TagFields.name, TagFields.style, TagFields.addresses)
			.Where(GetUserWhere(id_user, id_tenant))
			.Where(exp));

QUERY:
	1.
	SELECT id, name, style, addresses
	FROM mail_tag
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND  id = 230
	2.
	SELECT id, name, style, addresses
	FROM mail_tag
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND  name = 'test'
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>const</type>
			<possible_keys>PRIMARY,username</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>ref</type>
			<possible_keys>username</possible_keys>
			<key>username</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>19</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
7. public MailTag SaveMailTag(int id_tenant, string id_user, MailTag tag)

	tag.Id = db.ExecuteScalar<int>(
		new SqlInsert(MAIL_TAG)
			.InColumnValue(TagFields.id, 0)
			.InColumnValue(TagFields.id_tenant, id_tenant)
			.InColumnValue(TagFields.id_user, id_user)
			.InColumnValue(TagFields.name, tag.Name)
			.InColumnValue(TagFields.style, tag.Style)
			.InColumnValue(TagFields.addresses, string.Join(";", tag.Addresses.ToArray()))
			.Identity(0, 0, true));

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
8. public MailTag SaveMailTag(int id_tenant, string id_user, MailTag tag)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_TAG)
			.Set(TagFields.name, tag.Name)
			.Set(TagFields.style, tag.Style)
			.Set(TagFields.addresses, string.Join(";", tag.Addresses.ToArray()))
			.Where(TagFields.id, tag.Id));

QUERY:
	SELECT *
	FROM mail_tag
	WHERE id = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
9. public MailTag SaveMailTag(int id_tenant, string id_user, MailTag tag)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG_ADDRESSES)
			.Where(TagAddressFields.id_tag, tag.Id));

QUERY:
	SELECT *
	FROM mail_tag_addresses
	WHERE id_tag = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_addresses</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using index</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
10. public MailTag SaveMailTag(int id_tenant, string id_user, MailTag tag)

	foreach (var addr in tag.Addresses)
	{
		db.ExecuteNonQuery(
			new SqlInsert(MAIL_TAG_ADDRESSES)
				.InColumnValue(TagAddressFields.id_tag, tag.Id)
				.InColumnValue(TagAddressFields.address, addr)
				.InColumnValue(TagAddressFields.id_tenant, id_tenant));
	}

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:
------------------------------------------------------------------------------------------------
11. public void DeleteTag(int id_tenant, string id_user, int tag_id)

	var affected = db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG)
			.Where(TagFields.id, tag_id)
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT *
	FROM mail_tag
	WHERE id = 1 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag</table>
			<type>const</type>
			<possible_keys>PRIMARY,username</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Много возможных индексов;
------------------------------------------------------------------------------------------------
12. public void DeleteTag(int id_tenant, string id_user, int tag_id)

	db.ExecuteNonQuery(
		new SqlDelete(MAIL_TAG_MAIL)
			.Where(TagMailFields.id_tag, tag_id)
			.Where(GetUserWhere(id_user, id_tenant)));

QUERY:
	SELECT *
	FROM mail_tag_mail
	WHERE id_tag = 1 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
13. private void SetMessagesTagsNoLock(DbManager db, int tenant, string user, IEnumerable<int> tag_ids, IEnumerable<int> message_ids)

	var insert_query = string.Format("INSERT IGNORE INTO {0} ({1}, {2}, {3}, {4}) VALUES {5};",
		MAIL_TAG_MAIL, TagMailFields.id_mail, TagMailFields.id_tag, TagMailFields.id_tenant, TagMailFields.id_user, 
		string.Join(", ", message_ids.Select(message_id => string.Format(tags_format, message_id, tenant, user)).ToArray()));

	db.ExecuteNonQuery(insert_query);

QUERY:		-
EXPLAIN:	Not Supported
COMMENT:

------------------------------------------------------------------------------------------------
14. private void SetCrmTags(MailMessageItem mail, int tenant_id, string user_id)

	var tag_ids = db.ExecuteList(
		new SqlQuery("crm_entity_tag")
			.Distinct()
			.Select("tag_id")
			.Where("entity_type", (int)EntityType.Contact)
			.Where(Exp.In("entity_id", allowed_contact_ids)));

QUERY:
	SELECT DISTINCT tag_id
	FROM crm_entity_tag
	WHERE entity_type = 1 AND entity_id IN (1,2,3,4,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>crm_entity_tag</table>
			<type>index</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>tag_id</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>3</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
15. private void UpdateTagsCount(DbManager db, int tenant, string user, IEnumerable<int> ids)

	var res = db.ExecuteNonQuery(
		new SqlUpdate(MAIL_TAG + " mt")
			.Set("mt." + TagFields.count, count_query)
			.Where(GetUserWhere(user, tenant, "mt"))
			.Where(id>=0 ? new EqExp("mt." + TagFields.id, id) : new EqExp("mt." + TagFields.crm_id, -id)));

QUERY:
	1. 
	SELECT *
	FROM mail_tag mt
	WHERE mt.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND mt.tenant = 0 AND mt.id = 230
	2. 
	SELECT *
	FROM mail_tag mt
	WHERE mt.id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND mt.tenant = 0 AND mt.crm_id = -1
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mt</table>
			<type>const</type>
			<possible_keys>PRIMARY,username</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mt</table>
			<type>ref</type>
			<possible_keys>username</possible_keys>
			<key>username</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
16. private void UpdateTagsCount(DbManager db, int tenant, string user, IEnumerable<int> ids)

	var count_query = new SqlQuery(MAIL_TAG_MAIL)
		.SelectCount()
		.Where(GetUserWhere(user, tenant))
		.Where(TagMailFields.id_tag, id);

	db.ExecuteNonQuery(
		new SqlInsert(MAIL_TAG, true)
			.InColumnValue(TagFields.id_tenant, tenant)
			.InColumnValue(TagFields.id_user, user)
			.InColumnValue(TagFields.name, "")
			.InColumnValue(TagFields.crm_id, -id)
			.InColumnValue(TagFields.count, db.ExecuteScalar<int>(count_query))); -- Make 2 queries

QUERY:
	1.
	SELECT COUNT(*)
	FROM mail_tag_mail
	WHERE id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND id_tag = 1
	2.		-
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_tag_mail</table>
			<type>ref</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>1</rows>
			<Extra>Using where; Using index</Extra>
		</row>
	</table>
	2.
	Not Supported

COMMENT: Возможно можно упростить?
------------------------------------------------------------------------------------------------
-- 							MailBoxManager.Tasks.cs											  --
------------------------------------------------------------------------------------------------
1. public List<int> KillOldTasks()

	var query = new SqlQuery(MAIL_MAILBOX + " AS mb")
                    .LeftOuterJoin(MAIL_MAIL + " AS m",
                                   Exp.Sql("mb." + MailBoxFields.id + " = m." + MailFields.id_mailbox))
                    .Where("mb." + MailBoxFields.is_processed, true)
                    .Where("mb." + MailBoxFields.is_removed, false)
                    .Where("mb." + MailBoxFields.enabled, true)
                    .Where(
                        Exp.Gt(
                            string.Format("{0} - {1}", utc_ticks, "mb." + MailBoxFields.time_checked),
                            AGGREGATOR_TIMEOUT))
                    .GroupBy("m." + MailFields.id_mailbox)
                    .Select("mb." + MailBoxFields.id, "MAX(m." + MailFields.time_modified + ")");

                var old_tasks_list = db.ExecuteList(query);

QUERY:
	SELECT mb.id, MAX(m.time_modified)
	FROM mail_mailbox AS mb
	LEFT OUTER
	JOIN mail_mail AS m ON mb.id = m.id_mailbox
	WHERE mb.is_processed = TRUE AND mb.is_removed = FALSE AND mb.enabled = TRUE AND 635055850266670942 - mb.time_checked > 6000000000
	GROUP BY m.id_mailbox
EXPLAIN:
	<table_data name="НеизвестнаяТаблица">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">mb</field>
			<field name="type">ALL</field>
			<field name="possible_keys" xsi:nil="true" />
			<field name="key" xsi:nil="true" />
			<field name="key_len" xsi:nil="true" />
			<field name="ref" xsi:nil="true" />
			<field name="rows">587</field>
			<field name="Extra">Using where; Using temporary; Using filesort</field>
		</row>
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">m</field>
			<field name="type">ref</field>
			<field name="possible_keys">id_mailbox</field>
			<field name="key">id_mailbox</field>
			<field name="key_len">4</field>
			<field name="ref">test.mb.id</field>
			<field name="rows">37402</field>
			<field name="Extra"></field>
		</row>
	</table_data>

COMMENT: Возможно можно упростить?
------------------------------------------------------------------------------------------------
2. public List<int> KillOldTasks()

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Set(MailBoxFields.is_processed, false)
			.Where(Exp.In(MailBoxFields.id, old_tasks_list.ToArray())));

QUERY:
	SELECT id 
	FROM mail_mailbox
	WHERE is_processed = false AND id IN (1,2,3,4,5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>range</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref isnull="true" />
			<rows>5</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
3. public void MailboxProcessingCompleted(MailBox account)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id, account.MailBoxId)
			.Set(MailBoxFields.is_processed, false)
			.Set(MailBoxFields.msg_count_last, account.MessagesCount)
			.Set(MailBoxFields.size_last, account.Size)
			.Set(MailBoxFields.imap_folders, account.ImapFoldersJson));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
4. public void MailboxProcessingError(MailBox account, Exception exception)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id, account.MailBoxId)
			.Set(MailBoxFields.is_processed, false));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE id = 1 AND is_processed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
5. public void SetMailboxQuotaError(MailBox account, bool state)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id, account.MailBoxId)
			.Set(MailBoxFields.quota_error, state));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE id = 234 AND quota_error = true
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
6. public void SaveMailBoxLoginDelayExpires(MailBox mailbox, DateTime expires)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.address, mailbox.EMail) -- change to mailboxId
			.Where(MailBoxFields.is_removed, false)
			.Set(MailBoxFields.login_delay_expires, expires.Ticks));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE address = 'test@mail.ru' AND is_removed = false
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>ref</type>
			<possible_keys>address_index</possible_keys>
			<key>address_index</key>
			<key_len>767</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
7. public void UpdateUserActivity(int id_tenant, string id_user)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id_tenant, id_tenant)
			.Where(MailBoxFields.id_user, id_user)
			.Set(MailBoxFields.user_time_checked, DateTime.UtcNow.Ticks));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE tenant = 0 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6'
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>ref</type>
			<possible_keys>user_id_index</possible_keys>
			<key>user_id_index</key>
			<key_len>771</key_len>
			<ref>const,const</ref>
			<rows>100</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
8. public void SetAuthError(MailBox mailbox, bool error)

	var instr = new SqlUpdate(MAIL_MAILBOX)
		.Where(MailBoxFields.id, mailbox.MailBoxId)
		.Where(MailBoxFields.id_user, mailbox.UserId)
		.Where(MailBoxFields.id_tenant, mailbox.TenantId);

	db.ExecuteNonQuery(error
		? instr.Where(MailBoxFields.auth_error, null)
			  .Set(MailBoxFields.auth_error, DateTime.UtcNow.Ticks)
		: instr.Set(MailBoxFields.auth_error, null));

QUERY:
	1.
	SELECT * 
	FROM mail_mailbox
	WHERE id = 233 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0 AND auth_error is null
	2. 
	SELECT * 
	FROM mail_mailbox
	WHERE id = 1 AND id_user = '657d1d0e-c9f3-4c9d-bd48-07525e539fd6' AND tenant = 0
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY,user_id_index</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY,user_id_index</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
9. private MailBox GetMailboxForProcessing(TimeSpan activity_interval, string where_usertime_sql_format)

	locker = db.ExecuteScalar<int>("SELECT GET_LOCK('lock_id', 5)");

QUERY:
	SELECT GET_LOCK('lock_id', 5)
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table isnull="true" />
			<type isnull="true" />
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows isnull="true" />
			<Extra>No tables used</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
10. private MailBox GetMailboxForProcessing(TimeSpan activity_interval, string where_usertime_sql_format)

	1. var where_usertime_sql_format = "({0} - " + MailBoxFields.user_time_checked + " ) < {1}";
	2. var where_usertime_sql_format = "({0} - " + MailBoxFields.user_time_checked + " ) > {1}";
	
	var query = new SqlQuery(MAIL_MAILBOX)
                .Select(MailBoxFields.id_tenant,
                    MailBoxFields.id_user,
                    MailBoxFields.name,
                    MailBoxFields.address,
                    MailBoxFields.account,
                    MailBoxFields.password,
                    MailBoxFields.server,
                    MailBoxFields.ssl_enabled,
                    MailBoxFields.size_last,
                    MailBoxFields.msg_count_last,
                    MailBoxFields.smtp_server,
                    MailBoxFields.smtp_password,
                    MailBoxFields.smtp_account,
                    MailBoxFields.smtp_auth,
                    MailBoxFields.login_delay,
                    MailBoxFields.id,
                    MailBoxFields.enabled,
                    MailBoxFields.quota_error,
                    MailBoxFields.auth_error,
                    MailBoxFields.imap,
                    MailBoxFields.begin_date,
                    MailBoxFields.service_type,
                    MailBoxFields.refresh_token,
                    MailBoxFields.ssl_outgoing,
                    MailBoxFields.imap_folders)
		.Where(MailBoxFields.is_processed, false)
		.Where(string.Format(where_usertime_sql_format, utc_ticks, activity_interval.Ticks))
		.Where(Exp.Le(MailBoxFields.login_delay_expires, utc_ticks))
		.OrderBy(MailBoxFields.time_checked, true)
		.Where(Exp.And(Exp.Eq(MailBoxFields.is_removed, false), Exp.Eq(MailBoxFields.enabled, true)))
		.SetMaxResults(1);

	var list_results = db.ExecuteList(query);

QUERY:
	1.
	SELECT tenant, id_user, name, address, pop3_account, pop3_password, pop3_server, ssl_enabled, size_last, msg_count_last,
	smtp_server, smtp_password, smtp_account, smtp_auth, login_delay, id, enabled, quota_error, auth_error, imap,
	begin_date, service_type, refresh_token, ssl_outgoing, imap_folders
	FROM mail_mailbox
	WHERE is_processed = false AND (1000000 - user_time_checked) < 10 AND login_delay_expires <= 1000000 AND is_removed = false AND enabled = true
	ORDER BY time_checked
	LIMIT 1
	2.
	SELECT tenant, id_user, name, address, pop3_account, pop3_password, pop3_server, ssl_enabled, size_last, msg_count_last,
	smtp_server, smtp_password, smtp_account, smtp_auth, login_delay, id, enabled, quota_error, auth_error, imap,
	begin_date, service_type, refresh_token, ssl_outgoing, imap_folders
	FROM mail_mailbox
	WHERE is_processed = false AND (1000000 - user_time_checked) > 10 AND login_delay_expires <= 1000000 AND is_removed = false AND enabled = true
	ORDER BY time_checked
	LIMIT 1
EXPLAIN:
	1.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>login_delay_expires</key>
			<key_len>16</key_len>
			<ref isnull="true" />
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>
	2.
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>index</type>
			<possible_keys isnull="true" />
			<key>login_delay_expires</key>
			<key_len>16</key_len>
			<ref isnull="true" />
			<rows>1</rows>
			<Extra>Using where</Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);
------------------------------------------------------------------------------------------------
11. private MailBox GetMailboxForProcessing(TimeSpan activity_interval, string where_usertime_sql_format)

	db.ExecuteNonQuery(
		new SqlUpdate(MAIL_MAILBOX)
			.Where(MailBoxFields.id, selected_box.MailBoxId)
			.Set(MailBoxFields.time_checked, utc_ticks)
			.Set(MailBoxFields.is_processed, true));

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE id = 1
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>

COMMENT:Нужно добавить tenant/GetUserWhere(user, tenant);Не хватает is_remove/need_remove;
------------------------------------------------------------------------------------------------
12. private MailBox GetMailboxForProcessing(TimeSpan activity_interval, string where_usertime_sql_format)

	db.ExecuteScalar<int>("SELECT RELEASE_LOCK('lock_id')");

QUERY:
	SELECT RELEASE_LOCK('lock_id')
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table isnull="true" />
			<type isnull="true" />
			<possible_keys isnull="true" />
			<key isnull="true" />
			<key_len isnull="true" />
			<ref isnull="true" />
			<rows isnull="true" />
			<Extra>No tables used</Extra>
		</row>
	</table>

COMMENT:
------------------------------------------------------------------------------------------------
13. public void SetMailboxDelay(MailBox account, TimeSpan delay)

	var update_account_query = new SqlUpdate(MAIL_MAILBOX)
		.Where(MailBoxFields.id, account.MailBoxId)
		.Where(MailBoxFields.id_tenant, account.TenantId)
		.Set(MailBoxFields.is_processed, false)
		.Set(MailBoxFields.login_delay_expires, DateTime.UtcNow.Add(delay).Ticks);

	db.ExecuteNonQuery(update_account_query);

QUERY:
	SELECT * 
	FROM mail_mailbox
	WHERE id = 7 and tenant = 0 
EXPLAIN:
	<table name="UnknownTable">
		<row>
			<id>1</id>
			<select_type>SIMPLE</select_type>
			<table>mail_mailbox</table>
			<type>const</type>
			<possible_keys>PRIMARY</possible_keys>
			<key>PRIMARY</key>
			<key_len>4</key_len>
			<ref>const</ref>
			<rows>1</rows>
			<Extra></Extra>
		</row>
	</table>


COMMENT:
------------------------------------------------------------------------------------------------